 ################### Minilend Contract calls using Thirweb Integration Docs #########

################################# WRITE FUNCTIONS ########################################
## 1. borrow

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function borrow(address token, uint256 amount, address collateralToken)",
      params: [token, amount, collateralToken],
    });
    sendTransaction(transaction);
  };
}

## 2. deposit

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function deposit(address token, uint256 amount, uint256 lockPeriod)",
      params: [token, amount, lockPeriod],
    });
    sendTransaction(transaction);
  };
}

## 3. depositCollateral

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function depositCollateral(address token, uint256 amount)",
      params: [token, amount],
    });
    sendTransaction(transaction);
  };
}


## 4. getUSDCCollateral

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function depositUSDCollateral(uint256 amount)",
      params: [amount],
    });
    sendTransaction(transaction);
  };
}

## 5. getUserBalance

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function getUserBalance(address user, address token) returns (uint256)",
      params: [user, token],
    });
    sendTransaction(transaction);
  };
}

## 6. liquidate

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function liquidate(address user, address token, address collateralToken)",
      params: [user, token, collateralToken],
    });
    sendTransaction(transaction);
  };
}

## 7. repay

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function repay(address token, uint256 amount)",
      params: [token, amount],
    });
    sendTransaction(transaction);
  };
}


 ## 8. supply

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function supply(address token, uint256 amount, uint256 lockPeriod)",
      params: [token, amount, lockPeriod],
    });
    sendTransaction(transaction);
  };
}

## 9. withdraw

import { prepareContractCall } from "thirdweb";
import { useSendTransaction } from "thirdweb/react";

export default function Component() {
  const { mutate: sendTransaction } = useSendTransaction();

  const onClick = () => {
    const transaction = prepareContractCall({
      contract,
      method:
        "function withdraw(address token, uint256 amount)",
      params: [token, amount],
    });
    sendTransaction(transaction);
  };
}


######################## READ FUNCTIONS #############################################

## 1. INTEREST_SHARE_PROTOCOL

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function INTEREST_SHARE_PROTOCOL() view returns (uint256)",
    params: [],
  });
}

## 2. INTEREST_SHARE_PROVIDERS

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function INTEREST_SHARE_PROVIDERS() view returns (uint256)",
    params: [],
  });
}

## 3. LIQUIDATION_FEE

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function LIQUIDATION_FEE() view returns (uint256)",
    params: [],
  });
}

## 4. LIQUIDATION_THREASHOLD

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function LIQUIDATION_THRESHOLD() view returns (uint256)",
    params: [],
  });
}

## 5. MAX_LOCK_PERIOD

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function MAX_LOCK_PERIOD() view returns (uint256)",
    params: [],
  });
}

## 6. MIN_LOCK_PERIOD

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function MIN_LOCK_PERIOD() view returns (uint256)",
    params: [],
  });
}

## 7. PRECISION

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method: "function PRECISION() view returns (uint256)",
    params: [],
  });
}


## 8. accumulatedInterest

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function accumulatedInterest(address) view returns (uint256)",
    params: [],
  });
}

## 9. borrowStartTIme

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function borrowStartTime(address, address) view returns (uint256)",
    params: [],
  });
}

## 10. contractReserves

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function contractReserves(address, address) view returns (uint256)",
    params: [],
  });
}

## 11. defaultLockPeriods

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function defaultLockPeriods(uint256) view returns (uint256)",
    params: [],
  });
}

## 12. dollarBackedTokens

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function dollarBackedTokens(uint256) view returns (address)",
    params: [],
  });
}

## 13. interestRateParams

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function interestRateParams(address) view returns (uint256 optimalUtilization, uint256 baseRate, uint256 slope1, uint256 slope2)",
    params: [],
  });
}

## 14 is BorrowingPaused

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function isBorrowingPaused(address) view returns (bool)",
    params: [],
  });
}

## 15. isUnderCollateralized

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function isUndercollateralized(address user, address token, address collateralToken) view returns (bool)",
    params: [user, token, collateralToken],
  });
}

## 16. maxBorrowPerToken

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function maxBorrowPerToken(address) view returns (uint256)",
    params: [],
  });
}

## 17. minReserveTHreashold

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function minReserveThreshold(address) view returns (uint256)",
    params: [],
  });
}


## 18. supportedCollateral

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function supportedCollateral(uint256) view returns (address)",
    params: [],
  });
}

## 19. supportedStablecoins

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function supportedStablecoins(uint256) view returns (address)",
    params: [],
  });
}

## 20. totalBorrows

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function totalBorrows(address) view returns (uint256)",
    params: [],
  });
}

## 21 totalSupply

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function totalSupply(address) view returns (uint256)",
    params: [],
  });
}

## 22. userBorrows

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function userBorrows(address, address) view returns (uint256)",
    params: [],
  });
}


## 23. userCollateral

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function userCollateral(address, address) view returns (uint256)",
    params: [],
  });
}

## 24. userDeposits

import { useReadContract } from "thirdweb/react";

export default function Component() {
  const { data, isPending } = useReadContract({
    contract,
    method:
      "function userDeposits(address, address, uint256) view returns (uint256 amount, uint256 lockEnd)",
    params: [],
  });
}


################################# CONTRACT EVENTS #############################

## 1. BalanceUpdated

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event BalanceUpdated(address indexed user, address indexed token, uint256 balance, uint256 yield)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}


## 2. BorrowCapUpdated

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event BorrowCapUpdated(address indexed token, uint256 oldCap, uint256 newCap)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 3. Borrowed

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event Borrowed(address indexed user, address indexed token, uint256 amount, uint256 collateralUsed)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 4. BorrowPaused

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event BorrowingPaused(address indexed token, bool paused)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 5. CollateralDeposited

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event CollateralDeposited(address indexed user, address indexed token, uint256 amount)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 6. CollateralWithdrawn

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event CollateralWithdrawn(address indexed user, address indexed token, uint256 amount)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 7. Liquidated

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event Liquidated(address indexed user, address indexed token, uint256 debtAmount, uint256 collateralSeized, address collateralToken)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 8. Repaid

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event Repaid(address indexed user, address indexed token, uint256 principal, uint256 interest)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}


## 9. ReserverTHreasholdUpdated

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event ReserveThresholdUpdated(address indexed token, uint256 oldThreshold, uint256 newThreshold)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}


## 10. Supplied

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event Supplied(address indexed user, address indexed token, uint256 amount, uint256 lockPeriod)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}

## 11. Withdrawn

import { prepareEvent } from "thirdweb";
import { useContractEvents } from "thirdweb/react";

const preparedEvent = prepareEvent({
  signature:
    "event Withdrawn(address indexed user, address indexed token, uint256 amount, uint256 interest)",
});

export default function Component() {
  const { data: event } = useContractEvents({
    contract,
    events: [preparedEvent],
  });
}
