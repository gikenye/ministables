info:
  contact:
    name: thirdweb Support
    url: https://thirdweb.com/support
  description: thirdweb API provides a unified interface for Web3 development.
    Build scalable blockchain applications with easy-to-use endpoints for wallet
    management, transaction processing, signatures, and smart contract
    interactions. Powered by thirdweb's infrastructure.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: thirdweb API
  version: 1.0.0
openapi: 3.1.0
security:
  - ClientAuth: []
  - SecretKeyAuth: []
  - BearerAuth: []
  - EcosystemAuth: []
  - EcosystemPartnerAuth: []
servers:
  - description: thirdweb API server
    url: https://api.thirdweb.com
components:
  securitySchemes:
    ClientAuth:
      description: Client ID for frontend usage from allowlisted origins
      in: header
      name: x-client-id
      type: apiKey
    SecretKeyAuth:
      description: Secret key for backend usage (never expose publicly)
      in: header
      name: x-secret-key
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: JWT access token for frontend usage (obtained from wallet authentication)
      scheme: bearer
      type: http
    EcosystemAuth:
      description: Ecosystem ID for ecosystem wallet operations
      in: header
      name: x-ecosystem-id
      type: apiKey
    EcosystemPartnerAuth:
      description: Ecosystem Partner ID for partner-specific routing
      in: header
      name: x-ecosystem-partner-id
      type: apiKey
  schemas: {}
  parameters: {}
paths:
  /v1/contracts:
    get:
      description: >-
        Retrieves a list of all smart contracts imported by the authenticated
        client on the thirdweb dashboard. This endpoint provides access to
        contracts that have been added to your dashboard for management and
        interaction. Results include contract metadata, deployment information,
        and import timestamps.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.


        **ABI Enrichment**: When `includeAbi=true`, the endpoint will fetch the
        contract ABI (Application Binary Interface) from the thirdweb contract
        service for each contract. The ABI contains function signatures, event
        definitions, and interface specifications required for contract
        interaction.


        **Metadata Enrichment**: When `includeMetadata=true`, the endpoint will
        fetch additional metadata from the thirdweb contract metadata service
        for each contract. This includes information like contract name,
        description, compilation details, and more. The metadata is returned in
        an optional `metadata` object within each contract.
      examples:
        - description: Get the first 20 contracts imported by the client
          request:
            query:
              limit: 20
              page: 1
          response:
            result:
              contracts:
                - address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  chainId: 1
                  deployedAt: 2023-01-15T10:30:00Z
                  importedAt: 2023-01-16T14:20:00Z
                  name: MyToken
                  symbol: MTK
                  type: ERC20
                - address: "0x1234567890abcdef1234567890abcdef12345678"
                  chainId: 137
                  deployedAt: 2023-02-01T09:15:00Z
                  importedAt: 2023-02-01T11:45:00Z
                  name: MyNFT
                  type: ERC721
              meta:
                limit: 20
                page: 1
                totalItems: 45
                totalPages: 3
        - description: Get contracts with ABI enrichment
          request:
            query:
              includeAbi: true
              limit: 5
              page: 1
          response:
            result:
              contracts:
                - abi:
                    - inputs:
                        - name: account
                          type: address
                      name: balanceOf
                      outputs:
                        - name: ""
                          type: uint256
                      stateMutability: view
                      type: function
                    - inputs:
                        - name: to
                          type: address
                        - name: amount
                          type: uint256
                      name: transfer
                      outputs:
                        - name: ""
                          type: bool
                      stateMutability: nonpayable
                      type: function
                  address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  chainId: 1
                  deployedAt: 2023-01-15T10:30:00Z
                  importedAt: 2023-01-16T14:20:00Z
                  name: MyToken
                  symbol: MTK
                  type: ERC20
              meta:
                limit: 5
                page: 1
                totalItems: 45
                totalPages: 9
      operationId: listContracts
      summary: List Contracts
      tags:
        - Contracts
      parameters:
        - schema:
            type: string
            description: Whether to include the contract ABI (Application Binary Interface)
              for each contract. When true, fetches the ABI from the thirdweb
              contract service and returns it in an optional 'abi' array within
              each contract.
          required: false
          description: Whether to include the contract ABI (Application Binary Interface)
            for each contract. When true, fetches the ABI from the thirdweb
            contract service and returns it in an optional 'abi' array within
            each contract.
          name: includeAbi
          in: query
        - schema:
            type: string
            description: Whether to include contract metadata from the thirdweb contract
              metadata service. When true, fetches additional metadata for each
              contract and returns it in an optional 'metadata' object within
              each contract.
          required: false
          description: Whether to include contract metadata from the thirdweb contract
            metadata service. When true, fetches additional metadata for each
            contract and returns it in an optional 'metadata' object within each
            contract.
          name: includeMetadata
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            description: "The number of contracts to return (default: 20, max: 100)."
          required: false
          description: "The number of contracts to return (default: 20, max: 100)."
          name: limit
          in: query
        - schema:
            type: integer
            minimum: 1
            default: 1
            description: "The page number for pagination (default: 1)."
          required: false
          description: "The page number for pagination (default: 1)."
          name: page
          in: query
      responses:
        "200":
          description: Successfully retrieved list of contracts
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      contracts:
                        type: array
                        items:
                          type: object
                          properties:
                            abi:
                              type: array
                              items:
                                type: object
                                additionalProperties:
                                  nullable: true
                              description: The contract ABI (Application Binary Interface) as an array of
                                objects. Contains function definitions, event
                                signatures, constructor parameters, error
                                definitions, and other contract interface
                                specifications. Only present when
                                includeAbi=true.
                            address:
                              type: string
                              description: The contract address.
                            chainId:
                              type: string
                              description: The chain ID where the contract is deployed.
                            deployedAt:
                              type: string
                              description: The date when the contract was deployed.
                            id:
                              type: string
                              description: The contract ID.
                            importedAt:
                              type: string
                              description: The date when the contract was imported to the dashboard.
                            metadata:
                              type: object
                              properties:
                                chainId:
                                  type: number
                                  description: The chain ID where the contract is deployed.
                                compilationTarget:
                                  type: array
                                  items:
                                    type: string
                                  description: Array of compilation target paths.
                                contractAddress:
                                  type: string
                                  description: The contract address.
                                implementationAddress:
                                  type: string
                                  description: The implementation address for proxy contracts.
                                isCompositeAbi:
                                  type: boolean
                                  description: Whether the ABI is a composite of multiple contracts.
                                isPartialAbi:
                                  type: boolean
                                  description: Whether the ABI is partial or complete.
                                metadata:
                                  type: object
                                  additionalProperties:
                                    nullable: true
                                  description: Solidity metadata object as defined in the Solidity documentation.
                                    Contains compiler settings, sources, and
                                    other compilation metadata.
                                strategy:
                                  type: string
                                  description: The strategy used to retrieve the metadata.
                              required:
                                - chainId
                                - contractAddress
                              description: Additional contract metadata from the thirdweb contract metadata
                                service. Only present when includeMetadata=true.
                                Contains compilation details, ABI information,
                                and Solidity metadata.
                            name:
                              type: string
                              description: The contract name, if available.
                            symbol:
                              type: string
                              description: The contract symbol, if available.
                            type:
                              type: string
                              description: The contract type (e.g., ERC20, ERC721, etc.).
                          required:
                            - address
                            - chainId
                            - importedAt
                          description: Contract details enriched with additional project information from
                            the API server.
                        description: Array of contracts imported by the client.
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                    required:
                      - contracts
                      - pagination
                required:
                  - result
        "400":
          description: Invalid request parameters
        "401":
          description: Authentication required. The request must include a valid
            `x-secret-key` header for backend authentication.
        "429":
          description: Rate limit exceeded
        "500":
          description: Internal server error
    post:
      description: >-
        Deploy a new smart contract to a blockchain network. This endpoint
        allows you to deploy contracts by providing the contract source URL,
        target chain, constructor parameters, and optional salt for
        deterministic deployment.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.
      examples:
        - description: Deploy a simple contract with constructor parameters
          request:
            body:
              chainId: 421614
              constructorParams:
                _defaultAdmin: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                _name: MyToken
                _platformFeeBps: 100
                _platformFeeRecipient: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                _primarySaleRecipient: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                _symbol: MTK
                _trustedForwarders: []
              contractUrl: https://thirdweb.com/thirdweb.eth/TokenERC20
              salt: Hello, Thirdweb!
          response:
            result:
              address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
              chainId: 1
      operationId: deployContract
      summary: Deploy Contract
      tags:
        - Contracts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: "The blockchain network identifier. Common values include: 1
                    (Ethereum), 8453 (Base), 137 (Polygon), 56 (BSC), 43114
                    (Avalanche), 42161 (Arbitrum), 10 (Optimism)."
                constructorParams:
                  type: object
                  additionalProperties:
                    nullable: true
                  description: "Object containing constructor parameters for the contract
                    deployment (e.g., { param1: 'value1', param2: 123 })."
                contractUrl:
                  type: string
                  format: uri
                  description: The URL to the contract source from thirdweb.com (e.g.,
                    https://thirdweb.com/thirdweb.eth/TokenERC20). Version
                    suffixes will be automatically stripped.
                from:
                  type: string
                  description: The wallet address that will deploy the contract.
                salt:
                  type: string
                  description: Optional salt value for deterministic contract deployment.
              required:
                - chainId
                - contractUrl
                - from
      responses:
        "200":
          description: Contract deployed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      address:
                        type: string
                        description: The deployed contract address.
                      chainId:
                        type: number
                        description: The chain ID where the contract was deployed.
                      transactionId:
                        type: string
                        description: The unique identifier for the transaction that deployed the
                          contract. Will not be returned if the contract was
                          already deployed at the predicted address.
                    required:
                      - address
                      - chainId
                required:
                  - result
        "400":
          description: Invalid request parameters
        "401":
          description: Authentication required. The request must include a valid
            `x-secret-key` header for backend authentication.
        "429":
          description: Rate limit exceeded
        "500":
          description: Internal server error
  /v1/contracts/read:
    post:
      description: >-
        Executes multiple read-only contract method calls in a single batch
        request. This endpoint allows efficient batch reading from multiple
        contracts on the same chain, significantly reducing the number of HTTP
        requests needed. Each call specifies the contract address, method
        signature, and optional parameters. Results are returned in the same
        order as the input calls, with individual success/failure status for
        each operation.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get multiple ERC-20 token balances and metadata in one request
          request:
            body:
              calls:
                - contractAddress: "0xb2aA3511A31327d47D562c292D8B445A900B2ABf"
                  method: function getDeposit() view returns (uint256)
                - contractAddress: "0xBD0334AC7FADA28CcD27Fa09838e9EA4c39117Db"
                  method: function getDeposit() view returns (uint256)
              chainId: 42161
          response:
            result:
              - data: "251847784224398164"
                success: true
              - data: "119499816836484582"
                success: true
          summary: Batch ERC-20 Token Data
        - description: Read from multiple different contracts on the same chain
          request:
            body:
              calls:
                - contractAddress: "0xb2aA3511A31327d47D562c292D8B445A900B2ABf"
                  method: function getDeposit() view returns (uint256)
                - contractAddress: "0xBD0334AC7FADA28CcD27Fa09838e9EA4c39117Db"
                  method: function getDeposit() view returns (uint256)
              chainId: 42161
          response:
            result:
              - data: "251847784224398164"
                success: true
              - data: "119499816836484582"
                success: true
          summary: Multi-Contract Read on Polygon
        - description: Handling failed contract reads with error responses
          request:
            body:
              calls:
                - contractAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  method: function balanceOf(address) view returns (uint256)
                  params:
                    - "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                - contractAddress: "0x0000000000000000000000000000000000000000"
                  method: function invalidMethod() view returns (uint256)
              chainId: 1
          response:
            result:
              - data: "1000000000000000000"
                success: true
              - data: null
                error: Contract method call failed
                success: false
          summary: Mixed Success and Error Results
      operationId: readContract
      summary: Read Contract Methods
      tags:
        - Contracts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                calls:
                  type: array
                  items:
                    type: object
                    properties:
                      contractAddress:
                        type: string
                        description: The smart contract address. Must be a valid Ethereum-compatible
                          address (42 characters, starting with 0x).
                      method:
                        type: string
                        pattern: ^function\s+\w+
                        description: The contract function signature to call (e.g., 'function
                          approve(address spender, uint256 amount)' or `function
                          balanceOf(address)`). Must start with 'function'
                          followed by the function name and parameters as
                          defined in the contract ABI.
                      params:
                        type: array
                        items:
                          nullable: true
                        description: Array of parameters to pass to the contract method, in the correct
                          order and format.
                      value:
                        type: string
                        description: Amount of native token to send with the transaction in wei.
                          Required for payable methods.
                    required:
                      - contractAddress
                      - method
                  minItems: 1
                  description: Array of contract method calls to execute. Each call specifies a
                    contract address, method signature, and optional parameters.
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: "The blockchain network identifier. Common values include: 1
                    (Ethereum), 8453 (Base), 137 (Polygon), 56 (BSC), 43114
                    (Avalanche), 42161 (Arbitrum), 10 (Optimism)."
              required:
                - calls
                - chainId
              example:
                calls:
                  - contractAddress: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                    method: function name() view returns (string)
                  - contractAddress: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                    method: function totalSupply() returns (uint256)
                  - contractAddress: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
                    method: function balanceOf(address) returns (uint256)
                    params:
                      - "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                chainId: 8453
      responses:
        "200":
          description: Contract read operations completed successfully. Returns an array
            of results corresponding to each input call, including both
            successful and failed operations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        data:
                          nullable: true
                          description: The result of the contract read operation. The type and format
                            depend on the method's return value as defined in
                            the contract ABI.
                        error:
                          type: string
                          description: Error message if the contract read operation failed.
                        success:
                          type: boolean
                          description: Indicates whether the contract read operation was successful.
                      required:
                        - success
                    description: Array of results corresponding to each contract read call. Results
                      are returned in the same order as the input calls.
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the chainId is not
            supported, contract addresses are invalid, function signatures are
            malformed, or the calls array is empty.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "500":
          description: Internal server error. This may occur due to engine connectivity
            issues, RPC node unavailability, or unexpected server errors.
  /v1/contracts/{address}/transactions:
    get:
      description: >-
        Retrieves transactions for a specific smart contract address across one
        or more blockchain networks. This endpoint provides comprehensive
        transaction data including block information, gas details, transaction
        status, and function calls. Results can be filtered, paginated, and
        sorted to meet specific requirements.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get recent transactions for an ERC-20 token contract on Ethereum
            mainnet
          request:
            params:
              address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
            query:
              chainId:
                - 1
              limit: 10
              sortOrder: desc
          response:
            result:
              data:
                - blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                    c60000000000000000000000000000000000000000000000000de0b6b3a\
                    7640000"
                  effectiveGasPrice: "20000000000"
                  fromAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  functionSelector: "0xa9059cbb"
                  gas: 50000
                  gasPrice: "20000000000"
                  gasUsed: 21000
                  hash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea6335a57e"
                  nonce: 42
                  status: 1
                  toAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  transactionIndex: 100
                  value: "0"
              meta:
                address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                chainIds:
                  - 1
                limitPerChain: 10
                page: 0
                totalItems: 1500
                totalPages: 150
          summary: ERC-20 Token Transactions
        - description: Get transactions across multiple chains for a multi-chain contract
          request:
            params:
              address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
            query:
              chainId:
                - 1
                - 137
                - 56
              limit: 5
              page: 0
          response:
            result:
              data:
                - blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0x40c10f19000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                    c6000000000000000000000000000000000000000000000000000000000\
                    000002a"
                  effectiveGasPrice: "20000000000"
                  fromAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  functionSelector: "0x40c10f19"
                  gas: 80000
                  gasPrice: "20000000000"
                  gasUsed: 65000
                  hash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea6335a57e"
                  nonce: 42
                  status: 1
                  toAddress: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                  transactionIndex: 100
                  value: "0"
              meta:
                address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                chainIds:
                  - 1
                  - 137
                  - 56
                limitPerChain: 5
                page: 0
                totalItems: 750
                totalPages: 150
          summary: Multi-Chain Contract Transactions
        - description: Get contract transactions with ABI decoding enabled
          request:
            params:
              address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
            query:
              chainId:
                - 1
              decode: true
              limit: 5
          response:
            result:
              data:
                - blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8D43C67B8c8B3E9\
                    C60000000000000000000000000000000000000000000000000de0b6b3a\
                    7640000"
                  decoded:
                    inputs:
                      amount: "1000000000000000000"
                      to: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                    name: transfer
                    signature: transfer(address,uint256)
                  effectiveGasPrice: "20000000000"
                  fromAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  functionSelector: "0xa9059cbb"
                  gas: 50000
                  gasPrice: "20000000000"
                  gasUsed: 21000
                  hash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea6335a57e"
                  nonce: 42
                  status: 1
                  toAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  transactionIndex: 100
                  value: "0"
              meta:
                address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                chainIds:
                  - 1
                limitPerChain: 5
                page: 0
                totalItems: 500
                totalPages: 100
          summary: Contract Transactions with Decoding
      operationId: getContractTransactions
      summary: Get Contract Transactions
      tags:
        - Contracts
      parameters:
        - schema:
            type: string
            description: The smart contract address. Must be a valid Ethereum-compatible
              address (42 characters, starting with 0x).
          required: true
          description: The smart contract address. Must be a valid Ethereum-compatible
            address (42 characters, starting with 0x).
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request transaction data for. You can specify
              multiple chain IDs by repeating the parameter, up to a maximum of
              50. Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request transaction data for. You can specify
            multiple chain IDs by repeating the parameter, up to a maximum of
            50. Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
        - schema:
            type: boolean
            nullable: true
            description: Whether to enable ABI decoding of transaction data. When true,
              returns decoded function calls if ABI is available.
          required: false
          description: Whether to enable ABI decoding of transaction data. When true,
            returns decoded function calls if ABI is available.
          name: decode
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 20
            description: "The number of transactions to return per chain (default: 20, max:
              500)."
          required: false
          description: "The number of transactions to return per chain (default: 20, max:
            500)."
          name: limit
          in: query
        - schema:
            type: integer
            nullable: true
            minimum: 0
            maximum: 20
            default: 0
            description: "The page number for pagination (default: 0, max: 20)."
          required: false
          description: "The page number for pagination (default: 0, max: 20)."
          name: page
          in: query
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            description: "Sort order - ascending or descending (default: desc)."
          required: false
          description: "Sort order - ascending or descending (default: desc)."
          name: sortOrder
          in: query
        - schema:
            type: number
            nullable: true
            description: Start time for filtering transactions (Unix timestamp). Default is
              3 months ago.
          required: false
          description: Start time for filtering transactions (Unix timestamp). Default is
            3 months ago.
          name: startTime
          in: query
      responses:
        "200":
          description: Contract transactions retrieved successfully. Returns transaction
            data with metadata including pagination information and chain
            details. When decode=true, includes decoded function calls if ABI is
            available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            blockHash:
                              type: string
                              description: The hash of the block containing this transaction.
                            blockNumber:
                              type: number
                              description: The block number containing this transaction.
                            blockTimestamp:
                              type: number
                              description: The timestamp of the block (Unix timestamp).
                            chainId:
                              type: string
                              description: The chain ID where the transaction occurred.
                            contractAddress:
                              type: string
                              description: Contract address created if this was a contract creation
                                transaction.
                            cumulativeGasUsed:
                              type: number
                              description: Total gas used by all transactions in this block up to and
                                including this one.
                            data:
                              type: string
                              description: The transaction input data.
                            decoded:
                              type: object
                              properties:
                                inputs:
                                  type: object
                                  additionalProperties:
                                    nullable: true
                                  description: Object containing decoded function parameters.
                                name:
                                  type: string
                                  description: The function name.
                                signature:
                                  type: string
                                  description: The function signature.
                              required:
                                - inputs
                                - name
                                - signature
                              description: Decoded transaction data (only present when decode=true and ABI is
                                available).
                            effectiveGasPrice:
                              type: string
                              description: The effective gas price paid (in wei as string).
                            fromAddress:
                              type: string
                              description: The address that initiated the transaction.
                            functionSelector:
                              type: string
                              description: The function selector (first 4 bytes of the transaction data).
                            gas:
                              type: number
                              description: The gas limit for the transaction.
                            gasPrice:
                              type: string
                              description: The gas price used for the transaction (in wei as string).
                            gasUsed:
                              type: number
                              description: The amount of gas used by the transaction.
                            hash:
                              type: string
                              description: The transaction hash.
                            maxFeePerGas:
                              type: string
                              description: Maximum fee per gas (EIP-1559).
                            maxPriorityFeePerGas:
                              type: string
                              description: Maximum priority fee per gas (EIP-1559).
                            nonce:
                              type: number
                              description: The transaction nonce.
                            status:
                              type: number
                              description: The transaction status (1 for success, 0 for failure).
                            toAddress:
                              type: string
                              description: The address that received the transaction.
                            transactionIndex:
                              type: number
                              description: The index of the transaction within the block.
                            transactionType:
                              type: number
                              description: The transaction type (0=legacy, 1=EIP-2930, 2=EIP-1559).
                            value:
                              type: string
                              description: The value transferred in the transaction (in wei as string).
                          required:
                            - blockHash
                            - blockNumber
                            - blockTimestamp
                            - chainId
                            - data
                            - fromAddress
                            - functionSelector
                            - gas
                            - gasPrice
                            - hash
                            - nonce
                            - status
                            - toAddress
                            - transactionIndex
                            - value
                        description: Array of contract transactions.
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                    required:
                      - data
                      - pagination
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the contract address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or pagination parameters are out of range.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Contract not found or no transactions available for the specified
            contract address on the given blockchain networks.
        "500":
          description: Internal server error. This may occur due to network connectivity
            issues, external service unavailability, or unexpected server
            errors.
  /v1/contracts/{address}/events:
    get:
      description: >-
        Retrieves events emitted by a specific smart contract address across one
        or more blockchain networks. This endpoint provides comprehensive event
        data including block information, transaction details, event topics, and
        optional ABI decoding. Results can be filtered, paginated, and sorted to
        meet specific requirements.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get recent Transfer events from an ERC-20 token contract on
            Ethereum mainnet
          request:
            params:
              address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
            query:
              chainId:
                - 1
              decode: true
              limit: 10
              sortOrder: desc
          response:
            result:
              data:
                - address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000"
                  decoded:
                    indexedParams:
                      from: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                      to: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                    name: Transfer
                    nonIndexedParams:
                      value: "1000000000000000000"
                    signature: Transfer(address,address,uint256)
                  logIndex: 5
                  topics:
                    - "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a\
                      4df523b3ef"
                    - "0x000000000000000000000000742d35cc6634c0532925a3b8d43c67\
                      b8c8b3e9c6"
                    - "0x000000000000000000000000a0b86a33e6411e3036c1c4c7e815d0\
                      a82e3f5fd6"
                  transactionHash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea633\
                    5a57e"
                  transactionIndex: 100
              meta:
                address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                chainIds:
                  - 1
                limitPerChain: 10
                page: 0
                totalItems: 5000
                totalPages: 500
          summary: ERC-20 Transfer Events with Decoding
        - description: Get events across multiple chains for a multi-chain contract
            without decoding
          request:
            params:
              address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
            query:
              chainId:
                - 1
                - 137
                - 56
              decode: false
              limit: 5
              page: 0
          response:
            result:
              data:
                - address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                  blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0x000000000000000000000000000000000000000000000000000000000000002a"
                  logIndex: 2
                  topics:
                    - "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200a\
                      c8c7c3b925"
                    - "0x000000000000000000000000742d35cc6634c0532925a3b8d43c67\
                      b8c8b3e9c6"
                    - "0x0000000000000000000000002953399124f0cbb46d2cbacd8a89cf\
                      0599974963"
                  transactionHash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea633\
                    5a57e"
                  transactionIndex: 100
              meta:
                address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                chainIds:
                  - 1
                  - 137
                  - 56
                limitPerChain: 5
                page: 0
                totalItems: 2500
                totalPages: 500
          summary: Multi-Chain Contract Events
      operationId: getContractEvents
      summary: Get Contract Events
      tags:
        - Contracts
      parameters:
        - schema:
            type: string
            description: The smart contract address. Must be a valid Ethereum-compatible
              address (42 characters, starting with 0x).
          required: true
          description: The smart contract address. Must be a valid Ethereum-compatible
            address (42 characters, starting with 0x).
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request event data for. You can specify multiple
              chain IDs by repeating the parameter, up to a maximum of 50.
              Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request event data for. You can specify multiple
            chain IDs by repeating the parameter, up to a maximum of 50.
            Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
        - schema:
            type: boolean
            nullable: true
            description: Whether to enable ABI decoding of event data. When true, returns
              decoded event parameters if ABI is available.
          required: false
          description: Whether to enable ABI decoding of event data. When true, returns
            decoded event parameters if ABI is available.
          name: decode
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 20
            description: Maximum number of events to return per chain. Must be between 1 and
              500. Default is 20.
          required: false
          description: Maximum number of events to return per chain. Must be between 1 and
            500. Default is 20.
          name: limit
          in: query
        - schema:
            type: integer
            nullable: true
            minimum: 0
            maximum: 20
            default: 0
            description: Page number for pagination (0-based). Must be between 0 and 20.
              Default is 0.
          required: false
          description: Page number for pagination (0-based). Must be between 0 and 20.
            Default is 0.
          name: page
          in: query
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            description: Sort order for the results. Always sorts by block_number. 'desc'
              for newest first, 'asc' for oldest first. Default is 'desc'.
          required: false
          description: Sort order for the results. Always sorts by block_number. 'desc'
            for newest first, 'asc' for oldest first. Default is 'desc'.
          name: sortOrder
          in: query
        - schema:
            type: number
            nullable: true
            description: Start time for filtering events (Unix timestamp). Default is 3
              months ago.
          required: false
          description: Start time for filtering events (Unix timestamp). Default is 3
            months ago.
          name: startTime
          in: query
      responses:
        "200":
          description: Contract events retrieved successfully. Returns event data with
            metadata including pagination information and chain details. When
            decode=true, includes decoded event parameters if ABI is available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      events:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              description: The contract address that emitted the event.
                            blockHash:
                              type: string
                              description: The hash of the block containing this event.
                            blockNumber:
                              type: number
                              description: The block number where the event was emitted.
                            blockTimestamp:
                              type: number
                              description: The timestamp of the block (Unix timestamp).
                            chainId:
                              type: string
                              description: The chain ID where the event occurred.
                            data:
                              type: string
                              description: The non-indexed event data as a hex string.
                            decoded:
                              type: object
                              properties:
                                name:
                                  type: string
                                  description: The event name.
                                params:
                                  type: object
                                  additionalProperties:
                                    nullable: true
                                  description: Object containing decoded parameters.
                                signature:
                                  type: string
                                  description: The event signature.
                              required:
                                - name
                                - params
                                - signature
                              description: Decoded event data (only present when decode=true and ABI is
                                available).
                            logIndex:
                              type: number
                              description: The index of the log within the transaction.
                            topics:
                              type: array
                              items:
                                type: string
                              description: Array of indexed event topics (including event signature).
                            transactionHash:
                              type: string
                              description: The hash of the transaction containing this event.
                            transactionIndex:
                              type: number
                              description: The index of the transaction within the block.
                          required:
                            - address
                            - blockHash
                            - blockNumber
                            - blockTimestamp
                            - chainId
                            - data
                            - logIndex
                            - topics
                            - transactionHash
                            - transactionIndex
                        description: Array of contract events.
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                    required:
                      - events
                      - pagination
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the contract address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or pagination parameters are out of range.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Contract not found or no events available for the specified
            contract address on the given blockchain networks.
        "500":
          description: Internal server error. This may occur due to network connectivity
            issues, external service unavailability, or unexpected server
            errors.
  /v1/contracts/write:
    post:
      description: >-
        Executes write operations (transactions) on smart contracts. This is a
        convenience endpoint that simplifies contract interaction by accepting
        method signatures and parameters directly, without requiring manual
        transaction encoding. All calls are executed against the same contract
        address and chain, making it ideal for batch operations.


        **Authentication**: This endpoint requires project authentication and
        wallet authentication. For backend usage, use `x-secret-key` header. For
        frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>`
        headers.
      examples:
        - description: Execute a single ERC-20 token approval transaction (backend usage)
          request:
            body:
              calls:
                - contractAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  method: function approve(address spender, uint256 amount)
                  params:
                    - "0x1234567890123456789012345678901234567890"
                    - "1000000000000000000"
              chainId: 1
              from: "0x1234567890123456789012345678901234567890"
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              transactionIds:
                - 0xabcdef1234567890...
          summary: Single Token Approval (Backend)
        - description: Batch multiple contract calls in a single request (frontend usage)
          request:
            body:
              calls:
                - contractAddress: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                  method: function setApprovalForAll(address operator, bool approved)
                  params:
                    - "0x1234567890123456789012345678901234567890"
                    - true
                - contractAddress: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                  method: function mint(address to, uint256 tokenId)
                  params:
                    - "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                    - 42
              chainId: 137
              from: "0x1234567890123456789012345678901234567890"
            headers:
              Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              x-client-id: your-client-id
          response:
            result:
              transactionIds:
                - 0xabcdef1234567890...
                - 0x1234567890abcdef...
          summary: Batch NFT Operations (Frontend)
        - description: Execute payable contract method with native token value (backend
            usage)
          request:
            body:
              calls:
                - contractAddress: "0x1234567890123456789012345678901234567890"
                  method: function purchase(uint256 amount)
                  params:
                    - 5
                  value: "50000000000000000"
              chainId: 84532
              from: "0x1234567890123456789012345678901234567890"
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              transactionIds:
                - 0x1234567890abcdef...
          summary: Payable Method with Value (Backend)
      operationId: writeContract
      summary: Write Contract Methods
      tags:
        - Contracts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                calls:
                  type: array
                  items:
                    type: object
                    properties:
                      contractAddress:
                        type: string
                        description: The smart contract address. Must be a valid Ethereum-compatible
                          address (42 characters, starting with 0x).
                      method:
                        type: string
                        pattern: ^function\s+\w+
                        description: The contract function signature to call (e.g., 'function
                          approve(address spender, uint256 amount)' or `function
                          balanceOf(address)`). Must start with 'function'
                          followed by the function name and parameters as
                          defined in the contract ABI.
                      params:
                        type: array
                        items:
                          nullable: true
                        description: Array of parameters to pass to the contract method, in the correct
                          order and format.
                      value:
                        type: string
                        description: Amount of native token to send with the transaction in wei.
                          Required for payable methods.
                    required:
                      - contractAddress
                      - method
                  minItems: 1
                  description: Array of contract method calls to execute. Each call specifies a
                    contract address, method signature, and optional parameters.
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: "The blockchain network identifier. Common values include: 1
                    (Ethereum), 8453 (Base), 137 (Polygon), 56 (BSC), 43114
                    (Avalanche), 42161 (Arbitrum), 10 (Optimism)."
                from:
                  type: string
                  description: The wallet address that will send the transaction.
              required:
                - calls
                - chainId
                - from
              example:
                calls:
                  - contractAddress: "0xe352Cf5f74e3ACfd2d59EcCee6373d2Aa996086e"
                    method: function approve(address spender, uint256 amount)
                    params:
                      - "0x4fA9230f4E8978462cE7Bf8e6b5a2588da5F4264"
                      - 1000000000
                chainId: 84532
                from: "0x1234567890123456789012345678901234567890"
      responses:
        "200":
          description: Contract write operations submitted successfully. Returns
            transaction IDs for tracking and monitoring.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      transactionIds:
                        type: array
                        items:
                          type: string
                        description: Array of unique identifiers for the submitted transactions. Use
                          these to track transaction status.
                    required:
                      - transactionIds
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when contract parameters
            are malformed, method signatures are invalid, insufficient balance,
            or unsupported contract methods.
        "401":
          description: "Authentication required. For backend usage, include `x-secret-key`
            header. For frontend usage, include `x-client-id` + `Authorization:
            Bearer <jwt>` headers."
        "404":
          description: Contract not found. The specified contract address does not exist
            on the given blockchain network or is not accessible.
        "500":
          description: Internal server error. This may occur due to blockchain
            connectivity issues, gas estimation failures, contract execution
            errors, or unexpected server errors.
  /v1/wallets/{address}/balance:
    get:
      description: >-
        Get native token balance for a wallet address across multiple blockchain
        networks. This endpoint retrieves native token balances (ETH, MATIC,
        BNB, etc.) for a given wallet address on multiple chains simultaneously,
        making it efficient for cross-chain native balance checking.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get native token balance on Ethereum and Polygon
          request:
            params:
              address: "0x23ab781749E2694222f7FD499Ed7861463Fb9a5d"
            query:
              chainId:
                - 1
                - 137
          response:
            result:
              - chainId: 1
                decimals: 18
                displayValue: "1.5"
                name: Ether
                symbol: ETH
                tokenAddress: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
                value: "1500000000000000000"
              - chainId: 137
                decimals: 18
                displayValue: "2.3"
                name: Matic Token
                symbol: MATIC
                tokenAddress: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
                value: "2300000000000000000"
        - description: Get native balance across Base and Arbitrum chains
          request:
            params:
              address: "0x23ab781749E2694222f7FD499Ed7861463Fb9a5d"
            query:
              chainId:
                - 8453
                - 42161
          response:
            result:
              - chainId: 8453
                decimals: 18
                displayValue: "0.75"
                name: Ether
                symbol: ETH
                tokenAddress: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
                value: "750000000000000000"
              - chainId: 42161
                decimals: 18
                displayValue: "1.25"
                name: Ether
                symbol: ETH
                tokenAddress: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
                value: "1250000000000000000"
      operationId: getWalletBalance
      summary: Get Wallet Native Balance
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: A valid Ethereum address, which is a 40-character hexadecimal
              string (0x prefixed) representing an account on the Ethereum
              blockchain.
          required: true
          description: A valid Ethereum address, which is a 40-character hexadecimal
            string (0x prefixed) representing an account on the Ethereum
            blockchain.
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request balance data for. You can specify multiple
              chain IDs by repeating the parameter, up to a maximum of 50.
              Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request balance data for. You can specify multiple
            chain IDs by repeating the parameter, up to a maximum of 50.
            Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
      responses:
        "200":
          description: Wallet native balances retrieved successfully. Returns detailed
            native token balance information for each chain including token
            metadata and formatted values.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        chainId:
                          type: number
                          description: The blockchain network ID
                        decimals:
                          type: number
                          description: Number of decimal places for the token
                        displayValue:
                          type: string
                          description: Human-readable balance formatted with appropriate decimal places
                        name:
                          type: string
                          description: The token name (e.g., 'Ether', 'USD Coin')
                        symbol:
                          type: string
                          description: The token symbol (e.g., 'ETH', 'USDC')
                        tokenAddress:
                          type: string
                          description: The token contract address. Returns zero address (0x0...0) for
                            native tokens.
                        value:
                          type: string
                          description: Raw balance value as string in smallest unit (wei for ETH, etc.)
                      required:
                        - chainId
                        - decimals
                        - displayValue
                        - name
                        - symbol
                        - tokenAddress
                        - value
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the wallet address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or chain IDs are invalid.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "500":
          description: Internal server error. This may occur due to blockchain
            connectivity issues, RPC service unavailability, or unexpected
            server errors.
  /v1/wallets/{address}/transactions:
    get:
      description: >-
        Retrieves transactions for a specific wallet address across one or more
        blockchain networks. This endpoint provides comprehensive transaction
        data including both incoming and outgoing transactions, with block
        information, gas details, transaction status, and function calls.
        Results can be filtered, paginated, and sorted to meet specific
        requirements.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get recent transactions for a wallet on Ethereum mainnet
          request:
            query:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              chainId:
                - 1
              limit: 10
              sortOrder: desc
          response:
            result:
              data:
                - blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                    c60000000000000000000000000000000000000000000000000de0b6b3a\
                    7640000"
                  effectiveGasPrice: "20000000000"
                  fromAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  functionSelector: "0xa9059cbb"
                  gas: 50000
                  gasPrice: "20000000000"
                  gasUsed: 21000
                  hash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea6335a57e"
                  nonce: 42
                  status: 1
                  toAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  transactionIndex: 100
                  value: "1000000000000000000"
              meta:
                address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                chainIds:
                  - 1
                limitPerChain: 10
                page: 0
                totalItems: 1500
                totalPages: 150
          summary: Wallet Transactions on Ethereum
        - description: Get transactions across multiple chains with decoding enabled
          request:
            query:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              chainId:
                - 1
                - 137
                - 56
              decode: true
              limit: 5
              page: 0
          response:
            result:
              data:
                - blockHash: "0x3a1fba5abd9d41457944e91ed097e039b7b12d3d7ba324a3f422db2277a48e28"
                  blockNumber: 18500000
                  blockTimestamp: 1698000000
                  chainId: "1"
                  data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                    c60000000000000000000000000000000000000000000000000de0b6b3a\
                    7640000"
                  decoded:
                    inputs:
                      amount: "1000000000000000000"
                      to: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                    name: transfer
                    signature: transfer(address,uint256)
                  effectiveGasPrice: "20000000000"
                  fromAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  functionSelector: "0xa9059cbb"
                  gas: 50000
                  gasPrice: "20000000000"
                  gasUsed: 21000
                  hash: "0x218b632d932371478d1ae5a01620ebab1a2030f9dad6f8fba4a044ea6335a57e"
                  nonce: 42
                  status: 1
                  toAddress: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  transactionIndex: 100
                  value: "1000000000000000000"
              meta:
                address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                chainIds:
                  - 1
                  - 137
                  - 56
                limitPerChain: 5
                page: 0
                totalItems: 750
                totalPages: 150
          summary: Multi-Chain Wallet Transactions with Decoding
      operationId: getWalletTransactions
      summary: Get Wallet Transactions
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: A valid Ethereum address, which is a 40-character hexadecimal
              string (0x prefixed) representing an account on the Ethereum
              blockchain.
          required: true
          description: A valid Ethereum address, which is a 40-character hexadecimal
            string (0x prefixed) representing an account on the Ethereum
            blockchain.
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request transaction data for. You can specify
              multiple chain IDs by repeating the parameter, up to a maximum of
              50. Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request transaction data for. You can specify
            multiple chain IDs by repeating the parameter, up to a maximum of
            50. Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
        - schema:
            type: boolean
            nullable: true
            description: Whether to enable ABI decoding of transaction data. When true,
              returns decoded function calls if ABI is available.
          required: false
          description: Whether to enable ABI decoding of transaction data. When true,
            returns decoded function calls if ABI is available.
          name: decode
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 20
            description: "The number of transactions to return per chain (default: 20, max:
              500)."
          required: false
          description: "The number of transactions to return per chain (default: 20, max:
            500)."
          name: limit
          in: query
        - schema:
            type: integer
            nullable: true
            minimum: 0
            maximum: 20
            default: 0
            description: "The page number for pagination (default: 0, max: 20)."
          required: false
          description: "The page number for pagination (default: 0, max: 20)."
          name: page
          in: query
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            description: "Sort order - ascending or descending (default: desc)."
          required: false
          description: "Sort order - ascending or descending (default: desc)."
          name: sortOrder
          in: query
        - schema:
            type: number
            nullable: true
            description: Start time for filtering transactions (Unix timestamp). Default is
              3 months ago.
          required: false
          description: Start time for filtering transactions (Unix timestamp). Default is
            3 months ago.
          name: startTime
          in: query
      responses:
        "200":
          description: Wallet transactions retrieved successfully. Returns transaction
            data with metadata including pagination information and chain
            details. When decode=true, includes decoded function calls if ABI is
            available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                      transactions:
                        type: array
                        items:
                          type: object
                          properties:
                            blockHash:
                              type: string
                              description: The hash of the block containing this transaction.
                            blockNumber:
                              type: number
                              description: The block number containing this transaction.
                            blockTimestamp:
                              type: number
                              description: The timestamp of the block (Unix timestamp).
                            chainId:
                              type: string
                              description: The chain ID where the transaction occurred.
                            contractAddress:
                              type: string
                              description: Contract address created if this was a contract creation
                                transaction.
                            cumulativeGasUsed:
                              type: number
                              description: Total gas used by all transactions in this block up to and
                                including this one.
                            data:
                              type: string
                              description: The transaction input data.
                            decoded:
                              type: object
                              properties:
                                inputs:
                                  type: object
                                  additionalProperties:
                                    nullable: true
                                  description: Object containing decoded function parameters.
                                name:
                                  type: string
                                  description: The function name.
                                signature:
                                  type: string
                                  description: The function signature.
                              required:
                                - inputs
                                - name
                                - signature
                              description: Decoded transaction data (only present when decode=true and ABI is
                                available).
                            effectiveGasPrice:
                              type: string
                              description: The effective gas price paid (in wei as string).
                            fromAddress:
                              type: string
                              description: The address that initiated the transaction.
                            functionSelector:
                              type: string
                              description: The function selector (first 4 bytes of the transaction data).
                            gas:
                              type: number
                              description: The gas limit for the transaction.
                            gasPrice:
                              type: string
                              description: The gas price used for the transaction (in wei as string).
                            gasUsed:
                              type: number
                              description: The amount of gas used by the transaction.
                            hash:
                              type: string
                              description: The transaction hash.
                            maxFeePerGas:
                              type: string
                              description: Maximum fee per gas (EIP-1559).
                            maxPriorityFeePerGas:
                              type: string
                              description: Maximum priority fee per gas (EIP-1559).
                            nonce:
                              type: number
                              description: The transaction nonce.
                            status:
                              type: number
                              description: The transaction status (1 for success, 0 for failure).
                            toAddress:
                              type: string
                              description: The address that received the transaction.
                            transactionIndex:
                              type: number
                              description: The index of the transaction within the block.
                            transactionType:
                              type: number
                              description: The transaction type (0=legacy, 1=EIP-2930, 2=EIP-1559).
                            value:
                              type: string
                              description: The value transferred in the transaction (in wei as string).
                          required:
                            - blockHash
                            - blockNumber
                            - blockTimestamp
                            - chainId
                            - data
                            - fromAddress
                            - functionSelector
                            - gas
                            - gasPrice
                            - hash
                            - nonce
                            - status
                            - toAddress
                            - transactionIndex
                            - value
                        description: Array of wallet transactions.
                    required:
                      - pagination
                      - transactions
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the wallet address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or pagination parameters are out of range.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Wallet not found or no transactions available for the specified
            wallet address on the given blockchain networks.
        "500":
          description: Internal server error. This may occur due to network connectivity
            issues, external service unavailability, or unexpected server
            errors.
  /v1/wallets/{address}/tokens:
    get:
      description: >-
        Retrieves token balances for a specific wallet address across one or
        more blockchain networks. This endpoint provides comprehensive token
        data including ERC-20 tokens with their balances, metadata, and price
        information. Results can be filtered by chain and paginated to meet
        specific requirements.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get token balances for a wallet on Ethereum mainnet
          request:
            params:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
            query:
              chainId:
                - 1
              limit: 10
          response:
            result:
              pagination:
                limit: 10
                page: 0
                totalCount: 25
              tokens:
                - balance: "1000000000000000000"
                  chain_id: 1
                  decimals: 18
                  name: Dai Stablecoin
                  price_data:
                    market_cap_usd: 5000000000
                    percent_change_24h: 0.1
                    price_timestamp: 2024-01-15T10:30:00Z
                    price_usd: 1.001
                    volume_24h_usd: 50000000
                  symbol: DAI
                  token_address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
          summary: Wallet Tokens on Ethereum
        - description: Get token balances across multiple chains
          request:
            params:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
            query:
              chainId:
                - 1
                - 137
                - 56
              limit: 5
              page: 0
          response:
            result:
              pagination:
                limit: 5
                page: 0
                totalCount: 15
              tokens:
                - balance: "1000000000000000000"
                  chain_id: 1
                  decimals: 18
                  name: Dai Stablecoin
                  price_data:
                    market_cap_usd: 5000000000
                    percent_change_24h: 0.1
                    price_timestamp: 2024-01-15T10:30:00Z
                    price_usd: 1.001
                    volume_24h_usd: 50000000
                  symbol: DAI
                  token_address: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                - balance: "500000000"
                  chain_id: 137
                  decimals: 6
                  name: USD Coin
                  price_data:
                    market_cap_usd: 25000000000
                    percent_change_24h: -0.05
                    price_timestamp: 2024-01-15T10:30:00Z
                    price_usd: 0.999
                    volume_24h_usd: 100000000
                  symbol: USDC
                  token_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
          summary: Multi-Chain Wallet Tokens
      operationId: getWalletTokens
      summary: Get Wallet Tokens
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: A valid Ethereum address, which is a 40-character hexadecimal
              string (0x prefixed) representing an account on the Ethereum
              blockchain.
          required: true
          description: A valid Ethereum address, which is a 40-character hexadecimal
            string (0x prefixed) representing an account on the Ethereum
            blockchain.
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request token data for. You can specify multiple
              chain IDs by repeating the parameter, up to a maximum of 50.
              Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request token data for. You can specify multiple
            chain IDs by repeating the parameter, up to a maximum of 50.
            Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 20
            description: "The number of tokens to return per chain (default: 20, max: 500)."
          required: false
          description: "The number of tokens to return per chain (default: 20, max: 500)."
          name: limit
          in: query
        - schema:
            type: integer
            nullable: true
            minimum: 0
            maximum: 20
            default: 0
            description: "The page number for pagination (default: 0, max: 20)."
          required: false
          description: "The page number for pagination (default: 0, max: 20)."
          name: page
          in: query
      responses:
        "200":
          description: Wallet tokens retrieved successfully. Returns token data with
            metadata including pagination information and chain details.
            Includes token balances, metadata, and price information when
            available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                      tokens:
                        type: array
                        items:
                          type: object
                          properties:
                            balance:
                              type: string
                              description: The token balance as a string
                            chain_id:
                              type: number
                              description: The chain ID of the token
                            decimals:
                              type: number
                              description: The number of decimal places
                            name:
                              type: string
                              description: The token name
                            price_data:
                              type: object
                              properties:
                                circulating_supply:
                                  type: number
                                  description: The circulating supply of the token
                                market_cap_usd:
                                  type: number
                                  description: The market cap of the token in USD
                                percent_change_24h:
                                  type: number
                                  description: The percentage change of the token in the last 24 hours
                                price_timestamp:
                                  type: string
                                  description: The timestamp of the latest price update
                                price_usd:
                                  type: number
                                  description: The price of the token in USD
                                total_supply:
                                  type: number
                                  description: The total supply of the token
                                volume_24h_usd:
                                  type: number
                                  description: The volume of the token in USD
                              description: Price data for the token
                            symbol:
                              type: string
                              description: The token symbol
                            token_address:
                              type: string
                              description: The contract address of the token
                          required:
                            - balance
                            - chain_id
                            - token_address
                        description: Array of wallet tokens.
                    required:
                      - pagination
                      - tokens
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the wallet address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or pagination parameters are out of range.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Wallet not found or no tokens available for the specified wallet
            address on the given blockchain networks.
        "500":
          description: Internal server error. This may occur due to network connectivity
            issues, external service unavailability, or unexpected server
            errors.
  /v1/wallets/{address}/nfts:
    get:
      description: >-
        Retrieves NFTs for a specific wallet address across one or more
        blockchain networks. This endpoint provides comprehensive NFT data
        including metadata, attributes, and collection information. Results can
        be filtered by chain and paginated to meet specific requirements.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Get NFTs for a wallet on Ethereum mainnet
          request:
            params:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
            query:
              chainId:
                - 1
              limit: 10
          response:
            result:
              nfts:
                - attributes:
                    - trait_type: Background
                      value: Blue
                    - trait_type: Eyes
                      value: Laser Eyes
                  chain_id: 1
                  collection:
                    description: A collection of 10,000 unique Bored Ape NFTs
                    name: Bored Ape Yacht Club
                  description: A unique Bored Ape NFT
                  image: https://ipfs.io/ipfs/QmYxT4LnK8sqLupjbS6eRvu1si7Ly2wFQAqFebxhWntcf6
                  name: "Bored Ape #1234"
                  token_address: "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
                  token_id: "1234"
              pagination:
                hasMore: false
                limit: 10
                page: 0
          summary: Wallet NFTs on Ethereum
        - description: Get NFTs across multiple chains
          request:
            params:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
            query:
              chainId:
                - 1
                - 137
                - 56
              limit: 5
              page: 0
          response:
            result:
              nfts:
                - chain_id: 1
                  description: A unique Bored Ape NFT
                  image: https://ipfs.io/ipfs/QmYxT4LnK8sqLupjbS6eRvu1si7Ly2wFQAqFebxhWntcf6
                  name: "Bored Ape #1234"
                  token_address: "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
                  token_id: "1234"
                - chain_id: 137
                  description: A creature from the OpenSea collection
                  image: https://ipfs.io/ipfs/QmPbxeGcXhYQQNgsC6a36dDyYUcHgMLnGKnF8pVFmGsvqi
                  name: "OpenSea Creature #5678"
                  token_address: "0x2953399124F0cBB46d2CbACD8A89cF0599974963"
                  token_id: "5678"
              pagination:
                hasMore: true
                limit: 5
                page: 0
          summary: Multi-Chain Wallet NFTs
      operationId: getWalletNFTs
      summary: Get Wallet NFTs
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: A valid Ethereum address, which is a 40-character hexadecimal
              string (0x prefixed) representing an account on the Ethereum
              blockchain.
          required: true
          description: A valid Ethereum address, which is a 40-character hexadecimal
            string (0x prefixed) representing an account on the Ethereum
            blockchain.
          name: address
          in: path
        - schema:
            type: array
            description: "Chain ID(s) to request NFT data for. You can specify multiple
              chain IDs by repeating the parameter, up to a maximum of 50.
              Example: ?chainId=1&chainId=137"
            items:
              type: integer
            maxItems: 50
            minItems: 1
          required: true
          description: "Chain ID(s) to request NFT data for. You can specify multiple
            chain IDs by repeating the parameter, up to a maximum of 50.
            Example: ?chainId=1&chainId=137"
          name: chainId
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 20
            description: "The number of NFTs to return per chain (default: 20, max: 500)."
          required: false
          description: "The number of NFTs to return per chain (default: 20, max: 500)."
          name: limit
          in: query
        - schema:
            type: integer
            nullable: true
            minimum: 0
            maximum: 20
            default: 0
            description: "The page number for pagination (default: 0, max: 20)."
          required: false
          description: "The page number for pagination (default: 0, max: 20)."
          name: page
          in: query
      responses:
        "200":
          description: Wallet NFTs retrieved successfully. Returns NFT data with metadata
            including pagination information and chain details. Includes NFT
            metadata, attributes, and collection information when available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      nfts:
                        type: array
                        items:
                          type: object
                          properties:
                            animation_url:
                              type: string
                              description: The animation URL of the NFT
                            attributes:
                              type: array
                              items:
                                type: object
                                properties:
                                  display_type:
                                    type: string
                                    description: The display type
                                  trait_type:
                                    type: string
                                    description: The trait type
                                  value:
                                    anyOf:
                                      - type: string
                                      - type: number
                                    description: The trait value
                              description: The attributes/traits of the NFT
                            chain_id:
                              type: number
                              description: The chain ID of the NFT
                            collection:
                              type: object
                              properties:
                                description:
                                  type: string
                                  description: The collection description
                                external_url:
                                  type: string
                                  description: The collection external URL
                                image:
                                  type: string
                                  description: The collection image URL
                                name:
                                  type: string
                                  description: The collection name
                              description: Collection information
                            description:
                              type: string
                              description: The description of the NFT
                            external_url:
                              type: string
                              description: The external URL of the NFT
                            image_url:
                              type: string
                              description: The image URL of the NFT
                            metadata:
                              type: object
                              additionalProperties:
                                nullable: true
                              description: Additional metadata for the NFT
                            name:
                              type: string
                              description: The name of the NFT
                            token_address:
                              type: string
                              description: The contract address of the NFT collection
                            token_id:
                              type: string
                              description: The token ID of the NFT
                          required:
                            - chain_id
                            - token_address
                            - token_id
                        description: Array of wallet NFTs.
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                    required:
                      - nfts
                      - pagination
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the wallet address
            format is invalid, chainId array is empty or exceeds the maximum
            limit of 50, or pagination parameters are out of range.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Wallet not found or no NFTs available for the specified wallet
            address on the given blockchain networks.
        "500":
          description: Internal server error. This may occur due to network connectivity
            issues, external service unavailability, or unexpected server
            errors.
  /v1/wallets/server:
    post:
      description: >-
        Creates a server wallet from a unique identifier. If the wallet already
        exists, it will return the existing wallet.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.
      examples:
        - description: Create a new server wallet using a unique identifier (backend usage)
          request:
            body:
              identifier: treasury-wallet-123
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              smartWalletAddress: "0x1234567890123456789012345678901234567890"
          summary: Create Server Wallet
      operationId: createServerWallet
      summary: Create Server Wallet
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  minLength: 1
                  description: Unique identifier for wallet creation or retrieval. Can be user ID,
                    email, or any unique string. The same identifier will always
                    return the same wallet.
              required:
                - identifier
              description: Request body for creating a wallet
              examples:
                - identifier: treasury-wallet-123
      responses:
        "200":
          description: Server wallet created or connected successfully. Returns wallet
            addresses for subsequent operations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      address:
                        type: string
                        description: The EOA (Externally Owned Account) address of the wallet. This is
                          the traditional wallet address.
                      createdAt:
                        type: string
                        description: The date and time the wallet was created
                      profiles:
                        type: array
                        items:
                          oneOf:
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                familyName:
                                  type: string
                                givenName:
                                  type: string
                                hd:
                                  type: string
                                id:
                                  type: string
                                locale:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - google
                              required:
                                - email
                                - emailVerified
                                - hd
                                - id
                                - locale
                                - picture
                                - type
                              title: Google
                            - type: object
                              properties:
                                email:
                                  type: string
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - facebook
                              required:
                                - id
                                - type
                              title: Facebook
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                isPrivateEmail:
                                  type: boolean
                                type:
                                  type: string
                                  enum:
                                    - apple
                              required:
                                - emailVerified
                                - id
                                - isPrivateEmail
                                - type
                              title: Apple
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                  nullable: true
                                id:
                                  type: string
                                name:
                                  type: string
                                  nullable: true
                                type:
                                  type: string
                                  enum:
                                    - github
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: GitHub
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                email:
                                  type: string
                                  format: email
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - discord
                                username:
                                  type: string
                              required:
                                - avatar
                                - emailVerified
                                - id
                                - type
                                - username
                              title: Discord
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - coinbase
                              required:
                                - id
                                - name
                                - type
                              title: Coinbase
                            - type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - x
                                username:
                                  type: string
                              required:
                                - id
                                - name
                                - type
                                - username
                              title: X (Twitter)
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                metadata:
                                  type: object
                                  properties:
                                    avatar:
                                      type: object
                                      properties:
                                        large:
                                          type: string
                                        medium:
                                          type: string
                                        small:
                                          type: string
                                    personaname:
                                      type: string
                                    profileurl:
                                      type: string
                                    realname:
                                      type: string
                                  required:
                                    - avatar
                                type:
                                  type: string
                                  enum:
                                    - steam
                                username:
                                  type: string
                              required:
                                - id
                                - metadata
                                - type
                              title: Steam
                            - type: object
                              properties:
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - telegram
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: Telegram
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                description:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - twitch
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: Twitch
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - line
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: LINE
                            - type: object
                              properties:
                                fid:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - farcaster
                                walletAddress:
                                  type: string
                              required:
                                - fid
                                - id
                                - type
                              title: Farcaster
                            - type: object
                              properties:
                                algorithm:
                                  type: string
                                credentialId:
                                  type: string
                                publicKey:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - passkey
                              required:
                                - algorithm
                                - credentialId
                                - publicKey
                                - type
                              title: Passkey
                            - type: object
                              properties:
                                email:
                                  type: string
                                  format: email
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - email
                              required:
                                - email
                                - id
                                - type
                              title: Email
                            - type: object
                              properties:
                                id:
                                  type: string
                                pregeneratedIdentifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - pre_generation
                              required:
                                - id
                                - pregeneratedIdentifier
                                - type
                              title: Pre-generated Wallet
                            - type: object
                              properties:
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - phone
                              required:
                                - id
                                - phone
                                - type
                              title: Phone
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - siwe
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                                - walletAddress
                              title: Sign-In with Ethereum (SIWE)
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - guest
                              required:
                                - id
                                - type
                              title: Guest
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - backend
                              required:
                                - id
                                - type
                              title: Backend
                            - type: object
                              properties:
                                identifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - server
                              required:
                                - identifier
                                - type
                              title: Server
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_jwt
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom JWT
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_auth_endpoint
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom Auth Endpoint
                        description: The profiles linked to the wallet, can be email, phone, google etc,
                          or backend for developer created wallets
                      smartWalletAddress:
                        type: string
                        description: The smart wallet address with EIP-4337 support. This address
                          enables gasless transactions and advanced account
                          features.
                    required:
                      - address
                      - createdAt
                      - profiles
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the identifier format
            is invalid or required parameters are missing.
        "401":
          description: Authentication required. For backend usage, include `x-secret-key`
            header.
        "500":
          description: Internal server error. This may occur due to wallet service
            unavailability, smart account deployment issues, or unexpected
            server errors.
    get:
      description: >-
        Get all server wallet details with pagination for your project.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.
      examples:
        - description: Get first 10 server wallet details
          request:
            query:
              limit: 10
              page: 1
          response:
            result:
              pagination:
                limit: 10
                page: 1
                totalCount: 25
              wallets:
                - address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  createdAt: 2024-11-05T00:55:25.142Z
                  profiles:
                    - identifier: treasury-wallet-123
                      type: server
                  smartWalletAddress: "0x1234567890123456789012345678901234567890"
      operationId: listServerWallets
      summary: List Server Wallets
      tags:
        - Wallets
      parameters:
        - schema:
            type: number
            minimum: 1
            maximum: 100
            default: 50
          required: false
          name: limit
          in: query
        - schema:
            type: number
            minimum: 1
            default: 1
          required: false
          name: page
          in: query
      responses:
        "200":
          description: Returns a list of server wallet addresses, smart wallet addresses,
            and auth details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                        description: Pagination information
                      wallets:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              description: The EOA (Externally Owned Account) address of the wallet. This is
                                the traditional wallet address.
                            createdAt:
                              type: string
                              description: The date and time the wallet was created
                            profiles:
                              type: array
                              items:
                                oneOf:
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      emailVerified:
                                        type: boolean
                                      familyName:
                                        type: string
                                      givenName:
                                        type: string
                                      hd:
                                        type: string
                                      id:
                                        type: string
                                      locale:
                                        type: string
                                      name:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - google
                                    required:
                                      - email
                                      - emailVerified
                                      - hd
                                      - id
                                      - locale
                                      - picture
                                      - type
                                    title: Google
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      firstName:
                                        type: string
                                      id:
                                        type: string
                                      lastName:
                                        type: string
                                      name:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - facebook
                                    required:
                                      - id
                                      - type
                                    title: Facebook
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      emailVerified:
                                        type: boolean
                                      id:
                                        type: string
                                      isPrivateEmail:
                                        type: boolean
                                      type:
                                        type: string
                                        enum:
                                          - apple
                                    required:
                                      - emailVerified
                                      - id
                                      - isPrivateEmail
                                      - type
                                    title: Apple
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                        nullable: true
                                      id:
                                        type: string
                                      name:
                                        type: string
                                        nullable: true
                                      type:
                                        type: string
                                        enum:
                                          - github
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - username
                                    title: GitHub
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      email:
                                        type: string
                                        format: email
                                      emailVerified:
                                        type: boolean
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - discord
                                      username:
                                        type: string
                                    required:
                                      - avatar
                                      - emailVerified
                                      - id
                                      - type
                                      - username
                                    title: Discord
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      name:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - coinbase
                                    required:
                                      - id
                                      - name
                                      - type
                                    title: Coinbase
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      name:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - x
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - name
                                      - type
                                      - username
                                    title: X (Twitter)
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      metadata:
                                        type: object
                                        properties:
                                          avatar:
                                            type: object
                                            properties:
                                              large:
                                                type: string
                                              medium:
                                                type: string
                                              small:
                                                type: string
                                          personaname:
                                            type: string
                                          profileurl:
                                            type: string
                                          realname:
                                            type: string
                                        required:
                                          - avatar
                                      type:
                                        type: string
                                        enum:
                                          - steam
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - metadata
                                      - type
                                    title: Steam
                                  - type: object
                                    properties:
                                      firstName:
                                        type: string
                                      id:
                                        type: string
                                      lastName:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - telegram
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Telegram
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      description:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - twitch
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - username
                                    title: Twitch
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - line
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: LINE
                                  - type: object
                                    properties:
                                      fid:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - farcaster
                                      walletAddress:
                                        type: string
                                    required:
                                      - fid
                                      - id
                                      - type
                                    title: Farcaster
                                  - type: object
                                    properties:
                                      algorithm:
                                        type: string
                                      credentialId:
                                        type: string
                                      publicKey:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - passkey
                                    required:
                                      - algorithm
                                      - credentialId
                                      - publicKey
                                      - type
                                    title: Passkey
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                        format: email
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - email
                                    required:
                                      - email
                                      - id
                                      - type
                                    title: Email
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      pregeneratedIdentifier:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - pre_generation
                                    required:
                                      - id
                                      - pregeneratedIdentifier
                                      - type
                                    title: Pre-generated Wallet
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - phone
                                    required:
                                      - id
                                      - phone
                                      - type
                                    title: Phone
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - siwe
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - walletAddress
                                    title: Sign-In with Ethereum (SIWE)
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - guest
                                    required:
                                      - id
                                      - type
                                    title: Guest
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - backend
                                    required:
                                      - id
                                      - type
                                    title: Backend
                                  - type: object
                                    properties:
                                      identifier:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - server
                                    required:
                                      - identifier
                                      - type
                                    title: Server
                                  - type: object
                                    properties:
                                      authProviderId:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - custom_jwt
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Custom JWT
                                  - type: object
                                    properties:
                                      authProviderId:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - custom_auth_endpoint
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Custom Auth Endpoint
                              description: The profiles linked to the wallet, can be email, phone, google etc,
                                or backend for developer created wallets
                            smartWalletAddress:
                              type: string
                              description: The smart wallet address with EIP-4337 support. This address
                                enables gasless transactions and advanced
                                account features.
                          required:
                            - address
                            - createdAt
                            - profiles
                        description: Array of server wallets
                    required:
                      - pagination
                      - wallets
                required:
                  - result
        "401":
          description: Authentication required. The request must include a valid
            `x-secret-key` header for backend authentication.
        "500":
          description: Internal server error. This may occur due to service unavailability
            or unexpected server errors.
  /v1/wallets/user:
    get:
      description: >-
        Get all user wallet details with filtering and pagination for your
        project.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.
      examples:
        - description: Get first 10 user wallet details
          request:
            query:
              limit: 10
              page: 1
          response:
            result:
              pagination:
                hasMore: true
                limit: 10
                page: 1
              wallets:
                - address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  createdAt: 2024-11-05T00:55:25.142Z
                  profiles:
                    - email: richard@piedpiper.com
                      emailVerified: true
                      familyName: Hendricks
                      givenName: Richard
                      hd: piedpiper.com
                      id: "107302390467834615186"
                      locale: en
                      name: Richard Hendricks
                      picture: https://lh3.googleusercontent.com/a/test
                      type: google
                  smartWalletAddress: "0x1234567890123456789012345678901234567890"
      operationId: listUserWallets
      summary: List User Wallets
      tags:
        - Wallets
      parameters:
        - schema:
            type: number
            minimum: 1
            maximum: 100
            default: 50
          required: false
          name: limit
          in: query
        - schema:
            type: number
            minimum: 1
            default: 1
          required: false
          name: page
          in: query
        - schema:
            type: string
          required: false
          name: email
          in: query
        - schema:
            type: string
          required: false
          name: phone
          in: query
        - schema:
            type: string
          required: false
          name: address
          in: query
        - schema:
            type: string
          required: false
          name: externalWalletAddress
          in: query
        - schema:
            type: string
          required: false
          name: id
          in: query
      responses:
        "200":
          description: Returns a list of user wallet addresses, smart wallet addresses,
            and auth details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                        description: Pagination information
                      wallets:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              description: The EOA (Externally Owned Account) address of the wallet. This is
                                the traditional wallet address.
                            createdAt:
                              type: string
                              description: The date and time the wallet was created
                            profiles:
                              type: array
                              items:
                                oneOf:
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      emailVerified:
                                        type: boolean
                                      familyName:
                                        type: string
                                      givenName:
                                        type: string
                                      hd:
                                        type: string
                                      id:
                                        type: string
                                      locale:
                                        type: string
                                      name:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - google
                                    required:
                                      - email
                                      - emailVerified
                                      - hd
                                      - id
                                      - locale
                                      - picture
                                      - type
                                    title: Google
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      firstName:
                                        type: string
                                      id:
                                        type: string
                                      lastName:
                                        type: string
                                      name:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - facebook
                                    required:
                                      - id
                                      - type
                                    title: Facebook
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                      emailVerified:
                                        type: boolean
                                      id:
                                        type: string
                                      isPrivateEmail:
                                        type: boolean
                                      type:
                                        type: string
                                        enum:
                                          - apple
                                    required:
                                      - emailVerified
                                      - id
                                      - isPrivateEmail
                                      - type
                                    title: Apple
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                        nullable: true
                                      id:
                                        type: string
                                      name:
                                        type: string
                                        nullable: true
                                      type:
                                        type: string
                                        enum:
                                          - github
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - username
                                    title: GitHub
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      email:
                                        type: string
                                        format: email
                                      emailVerified:
                                        type: boolean
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - discord
                                      username:
                                        type: string
                                    required:
                                      - avatar
                                      - emailVerified
                                      - id
                                      - type
                                      - username
                                    title: Discord
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      name:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - coinbase
                                    required:
                                      - id
                                      - name
                                      - type
                                    title: Coinbase
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      name:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - x
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - name
                                      - type
                                      - username
                                    title: X (Twitter)
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      metadata:
                                        type: object
                                        properties:
                                          avatar:
                                            type: object
                                            properties:
                                              large:
                                                type: string
                                              medium:
                                                type: string
                                              small:
                                                type: string
                                          personaname:
                                            type: string
                                          profileurl:
                                            type: string
                                          realname:
                                            type: string
                                        required:
                                          - avatar
                                      type:
                                        type: string
                                        enum:
                                          - steam
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - metadata
                                      - type
                                    title: Steam
                                  - type: object
                                    properties:
                                      firstName:
                                        type: string
                                      id:
                                        type: string
                                      lastName:
                                        type: string
                                      picture:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - telegram
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Telegram
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      description:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - twitch
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - username
                                    title: Twitch
                                  - type: object
                                    properties:
                                      avatar:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - line
                                      username:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: LINE
                                  - type: object
                                    properties:
                                      fid:
                                        type: string
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - farcaster
                                      walletAddress:
                                        type: string
                                    required:
                                      - fid
                                      - id
                                      - type
                                    title: Farcaster
                                  - type: object
                                    properties:
                                      algorithm:
                                        type: string
                                      credentialId:
                                        type: string
                                      publicKey:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - passkey
                                    required:
                                      - algorithm
                                      - credentialId
                                      - publicKey
                                      - type
                                    title: Passkey
                                  - type: object
                                    properties:
                                      email:
                                        type: string
                                        format: email
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - email
                                    required:
                                      - email
                                      - id
                                      - type
                                    title: Email
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      pregeneratedIdentifier:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - pre_generation
                                    required:
                                      - id
                                      - pregeneratedIdentifier
                                      - type
                                    title: Pre-generated Wallet
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - phone
                                    required:
                                      - id
                                      - phone
                                      - type
                                    title: Phone
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - siwe
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                      - walletAddress
                                    title: Sign-In with Ethereum (SIWE)
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - guest
                                    required:
                                      - id
                                      - type
                                    title: Guest
                                  - type: object
                                    properties:
                                      id:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - backend
                                    required:
                                      - id
                                      - type
                                    title: Backend
                                  - type: object
                                    properties:
                                      identifier:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - server
                                    required:
                                      - identifier
                                      - type
                                    title: Server
                                  - type: object
                                    properties:
                                      authProviderId:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - custom_jwt
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Custom JWT
                                  - type: object
                                    properties:
                                      authProviderId:
                                        type: string
                                      email:
                                        type: string
                                      id:
                                        type: string
                                      phone:
                                        type: string
                                      type:
                                        type: string
                                        enum:
                                          - custom_auth_endpoint
                                      walletAddress:
                                        type: string
                                    required:
                                      - id
                                      - type
                                    title: Custom Auth Endpoint
                              description: The profiles linked to the wallet, can be email, phone, google etc,
                                or backend for developer created wallets
                            smartWalletAddress:
                              type: string
                              description: The smart wallet address with EIP-4337 support. This address
                                enables gasless transactions and advanced
                                account features.
                          required:
                            - address
                            - createdAt
                            - profiles
                        description: Array of user wallets
                    required:
                      - pagination
                      - wallets
                required:
                  - result
        "401":
          description: Authentication required. The request must include a valid
            `x-secret-key` header for backend authentication.
        "500":
          description: Internal server error. This may occur due to service unavailability
            or unexpected server errors.
  /v1/wallets/user/me:
    get:
      description: >-
        Retrieves detailed user information for the authenticated user. This
        endpoint fetches user data including authentication details and linked
        accounts using the bearer token.


        **Authentication**: This endpoint requires user authentication using the
        `Authorization: Bearer <jwt>` header.
      examples:
        - description: Get detailed information for the authenticated user
          request:
            headers:
              Authorization: Bearer <jwt-token>
          response:
            result:
              address: "0x742d35Cc6634C0532925a3b8D43c67B8C8B3e9C6"
              createdAt: 2024-11-05T00:55:25.142Z
              profiles:
                - email: richard@piedpiper.com
                  id: email_123
                  type: email
                - email: richard@piedpiper.com
                  emailVerified: true
                  familyName: Hendricks
                  givenName: Richard
                  hd: piedpiper.com
                  id: google_456
                  locale: en
                  name: Richard Hendricks
                  picture: https://example.com/avatar.jpg
                  type: google
              smartWalletAddress: "0x1234567890123456789012345678901234567890"
          summary: Get User Details
      operationId: getUserDetails
      summary: Get User Details
      tags:
        - Wallets
      responses:
        "200":
          description: User details retrieved successfully. Returns comprehensive user
            information including authentication details and linked accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      address:
                        type: string
                        description: The EOA (Externally Owned Account) address of the wallet. This is
                          the traditional wallet address.
                      createdAt:
                        type: string
                        description: The date and time the wallet was created
                      profiles:
                        type: array
                        items:
                          oneOf:
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                familyName:
                                  type: string
                                givenName:
                                  type: string
                                hd:
                                  type: string
                                id:
                                  type: string
                                locale:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - google
                              required:
                                - email
                                - emailVerified
                                - hd
                                - id
                                - locale
                                - picture
                                - type
                              title: Google
                            - type: object
                              properties:
                                email:
                                  type: string
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - facebook
                              required:
                                - id
                                - type
                              title: Facebook
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                isPrivateEmail:
                                  type: boolean
                                type:
                                  type: string
                                  enum:
                                    - apple
                              required:
                                - emailVerified
                                - id
                                - isPrivateEmail
                                - type
                              title: Apple
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                  nullable: true
                                id:
                                  type: string
                                name:
                                  type: string
                                  nullable: true
                                type:
                                  type: string
                                  enum:
                                    - github
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: GitHub
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                email:
                                  type: string
                                  format: email
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - discord
                                username:
                                  type: string
                              required:
                                - avatar
                                - emailVerified
                                - id
                                - type
                                - username
                              title: Discord
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - coinbase
                              required:
                                - id
                                - name
                                - type
                              title: Coinbase
                            - type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - x
                                username:
                                  type: string
                              required:
                                - id
                                - name
                                - type
                                - username
                              title: X (Twitter)
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                metadata:
                                  type: object
                                  properties:
                                    avatar:
                                      type: object
                                      properties:
                                        large:
                                          type: string
                                        medium:
                                          type: string
                                        small:
                                          type: string
                                    personaname:
                                      type: string
                                    profileurl:
                                      type: string
                                    realname:
                                      type: string
                                  required:
                                    - avatar
                                type:
                                  type: string
                                  enum:
                                    - steam
                                username:
                                  type: string
                              required:
                                - id
                                - metadata
                                - type
                              title: Steam
                            - type: object
                              properties:
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - telegram
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: Telegram
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                description:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - twitch
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: Twitch
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - line
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: LINE
                            - type: object
                              properties:
                                fid:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - farcaster
                                walletAddress:
                                  type: string
                              required:
                                - fid
                                - id
                                - type
                              title: Farcaster
                            - type: object
                              properties:
                                algorithm:
                                  type: string
                                credentialId:
                                  type: string
                                publicKey:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - passkey
                              required:
                                - algorithm
                                - credentialId
                                - publicKey
                                - type
                              title: Passkey
                            - type: object
                              properties:
                                email:
                                  type: string
                                  format: email
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - email
                              required:
                                - email
                                - id
                                - type
                              title: Email
                            - type: object
                              properties:
                                id:
                                  type: string
                                pregeneratedIdentifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - pre_generation
                              required:
                                - id
                                - pregeneratedIdentifier
                                - type
                              title: Pre-generated Wallet
                            - type: object
                              properties:
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - phone
                              required:
                                - id
                                - phone
                                - type
                              title: Phone
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - siwe
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                                - walletAddress
                              title: Sign-In with Ethereum (SIWE)
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - guest
                              required:
                                - id
                                - type
                              title: Guest
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - backend
                              required:
                                - id
                                - type
                              title: Backend
                            - type: object
                              properties:
                                identifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - server
                              required:
                                - identifier
                                - type
                              title: Server
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_jwt
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom JWT
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_auth_endpoint
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom Auth Endpoint
                        description: The profiles linked to the wallet, can be email, phone, google etc,
                          or backend for developer created wallets
                      smartWalletAddress:
                        type: string
                        description: The smart wallet address with EIP-4337 support. This address
                          enables gasless transactions and advanced account
                          features.
                    required:
                      - address
                      - createdAt
                      - profiles
                required:
                  - result
        "401":
          description: "Authentication required. The request must include a valid
            `Authorization: Bearer <jwt>` header for user authentication."
        "404":
          description: User not found. The authenticated user does not exist or is not
            associated with any wallet in the system.
        "500":
          description: Internal server error. This may occur due to service
            unavailability, network connectivity issues, or unexpected server
            errors.
  /v1/wallets/user/code:
    post:
      description: >-
        Send email or phone code for creating or accessing a user wallet.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: sendCode
      summary: Send Login Code
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email:
                      type: string
                      format: email
                      description: The email address to send the OTP code to
                    type:
                      type: string
                      enum:
                        - email
                      description: Send code to email address
                  required:
                    - email
                    - type
                  description: Request to send OTP to an email address
                  title: Email
                - type: object
                  properties:
                    phone:
                      type: string
                      minLength: 1
                      description: The phone number to send the OTP code to
                    type:
                      type: string
                      enum:
                        - phone
                      description: Send code to phone number
                  required:
                    - phone
                    - type
                  description: Request to send OTP to a phone number
                  title: Phone
              description: Request body for sending an OTP code to either email or phone
              examples:
                - type: email
                  email: test@test.com
                - type: phone
                  phone: "+1234567890"
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/code/verify:
    post:
      description: >-
        Verify email or phone code for creating or accessing a user wallet.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: verifyCode
      summary: Login with Code
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    code:
                      type: string
                      minLength: 6
                      maxLength: 6
                      description: The 6-digit OTP code sent to the email address
                    email:
                      type: string
                      format: email
                      description: The email address to verify
                    type:
                      type: string
                      enum:
                        - email
                      description: Verify code for email address
                  required:
                    - code
                    - email
                    - type
                  description: Request to verify OTP for an email address
                  title: VerifyEmail
                - type: object
                  properties:
                    code:
                      type: string
                      minLength: 6
                      maxLength: 6
                      description: The 6-digit OTP code sent to the phone number
                    phone:
                      type: string
                      minLength: 1
                      description: The phone number to verify
                    type:
                      type: string
                      enum:
                        - phone
                      description: Verify code for phone number
                  required:
                    - code
                    - phone
                    - type
                  description: Request to verify OTP for a phone number
                  title: VerifyPhone
              description: Request body for verifying an OTP code for either email or phone
              examples:
                - type: email
                  email: test@test.com
                  code: "123456"
                - type: phone
                  phone: "+1234567890"
                  code: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isNewUser:
                    type: boolean
                  token:
                    type: string
                  type:
                    type: string
                  walletAddress:
                    type: string
                required:
                  - isNewUser
                  - token
                  - type
                  - walletAddress
        "400":
          description: Invalid OTP or request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/generic-auth:
    post:
      description: >-
        Authenticate user with generic authentication methods. Supports OpenID
        Connect (OIDC) JWT tokens or custom authentication payloads. To use this
        endpoint, you must first configure your authentication details in your
        project dashboard settings.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: genericAuth
      summary: Login with Generic Auth
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - jwt
                    jwt:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - jwt
                  description: OIDC compliant JWT authentication, verified via JWKS
                  title: JWT Authentication
                  example:
                    type: jwt
                    jwt: jwt
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - auth-payload
                    payload:
                      type: string
                      minLength: 1
                  required:
                    - type
                    - payload
                  description: Custom authentication payload, verified with a generic endpoint
                  title: Generic Endpoint Authentication
                  example:
                    type: auth-payload
                    payload: payload
              description: Generic authentication methods. Supports OIDC JWT tokens or custom
                authentication payloads.
              title: Generic Authentication
              examples:
                - type: jwt
                  jwt: <oidc-compliant-jwt>
                - type: auth-payload
                  payload: <custom-auth-payload>
      responses:
        "200":
          description: Authentication verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isNewUser:
                    type: boolean
                  token:
                    type: string
                  type:
                    type: string
                  walletAddress:
                    type: string
                required:
                  - isNewUser
                  - token
                  - type
                  - walletAddress
        "400":
          description: Invalid authentication data or request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/oauth/{provider}:
    get:
      description: Initiate OAuth flow for a given provider (google, apple, github,
        etc). Open this URL in a browser to begin authentication. After
        authentication, the user will be redirected to the redirect URL with an
        authResult parameter containing the user's wallet address and auth
        token.
      operationId: initOauth
      summary: Login with OAuth
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: The thirdweb project client ID
          required: true
          name: clientId
          in: query
        - schema:
            type: string
            description: The redirect URL post authentication
          required: false
          name: redirectUrl
          in: query
      responses:
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/passkey:
    get:
      description: >-
        Generate passkey challenge for creating or accessing a user wallet. 


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: generatePasskeyChallenge
      summary: Generate Passkey Challenge
      tags:
        - Wallets
      parameters:
        - schema:
            anyOf:
              - type: string
                enum:
                  - sign-up
                title: Sign up
              - type: string
                enum:
                  - sign-in
                title: Sign in
            description: Authentication type for passkey - either sign-up for new users or
              sign-in for existing users
          required: true
          name: type
          in: query
        - schema:
            type: string
            description: Optional username for passkey registration
          required: false
          name: username
          in: query
      responses:
        "200":
          description: Passkey challenge generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  serverVerificationId:
                    type: string
                    description: Server verification ID for the passkey challenge
                  challenge:
                    type: string
                    description: Passkey challenge string
                  type:
                    anyOf:
                      - type: string
                        enum:
                          - sign-up
                        title: Sign up
                      - type: string
                        enum:
                          - sign-in
                        title: Sign in
                    description: Authentication type for passkey - either sign-up for new users or
                      sign-in for existing users
                required:
                  - serverVerificationId
                  - challenge
                  - type
                description: Response containing passkey challenge data
                examples:
                  - serverVerificationId: <serverVerificationId>
                    challenge: <challenge>
                    type: sign-up
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/passkey/verify:
    post:
      description: >-
        Verify passkey challenge for creating or accessing a user wallet.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: verifyPasskey
      summary: Login with Passkey
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  anyOf:
                    - type: string
                      enum:
                        - sign-up
                      title: Sign up
                    - type: string
                      enum:
                        - sign-in
                      title: Sign in
                  description: Authentication type for passkey - either sign-up for new users or
                    sign-in for existing users
                authenticatorData:
                  type: string
                  description: Authenticator data from the passkey response
                credentialId:
                  type: string
                  description: Credential ID from the passkey response
                serverVerificationId:
                  type: string
                  description: Server verification ID from the challenge
                clientData:
                  type: string
                  description: Client data from the passkey response
                origin:
                  type: string
                  description: Origin of the request
                rpId:
                  type: string
                  description: Relying Party ID
                signature:
                  type: string
                  description: Signature for passkey sign in
                username:
                  type: string
                  description: Username for passkey registration
                credential:
                  type: object
                  properties:
                    publicKey:
                      type: string
                      description: Public key for the credential
                    algorithm:
                      anyOf:
                        - type: string
                          enum:
                            - RS256
                        - type: string
                          enum:
                            - ES256
                      description: Algorithm used for the credential
                  required:
                    - publicKey
                    - algorithm
                  description: Credential data for passkey registration
              required:
                - type
                - authenticatorData
                - credentialId
                - serverVerificationId
                - clientData
              description: Request body for validating passkey authentication
      responses:
        "200":
          description: Passkey verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isNewUser:
                    type: boolean
                  token:
                    type: string
                  type:
                    type: string
                  walletAddress:
                    type: string
                required:
                  - isNewUser
                  - token
                  - type
                  - walletAddress
        "400":
          description: Invalid passkey or request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/pregenerate:
    post:
      description: >-
        Pre-generate a wallet for a user based on their authentication strategy.
        This endpoint creates a wallet in advance that can be claimed later when
        the user authenticates.


        **Authentication**: This endpoint requires backend authentication using
        the `x-secret-key` header. The secret key should never be exposed
        publicly.
      examples:
        - description: Pre-generate wallet for email authentication
          request:
            body:
              strategy: email
              email: richard@piedpiper.com
          response:
            result:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              createdAt: 2024-11-05T00:55:25.142Z
              profiles:
                - email: richard@piedpiper.com
                  type: email
              smartWalletAddress: "0x1234567890123456789012345678901234567890"
        - description: Pre-generate wallet for SIWE authentication
          request:
            body:
              strategy: siwe
              walletAddress: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
          response:
            result:
              address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              createdAt: 2024-11-05T00:55:25.142Z
              profiles:
                - address: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  type: siwe
              smartWalletAddress: "0x1234567890123456789012345678901234567890"
      operationId: pregenerateWallet
      summary: Pre-generate User Wallet
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - google
                    - apple
                    - facebook
                    - discord
                    - email
                    - phone
                    - custom_auth_endpoint
                    - custom_jwt
                    - siwe
                walletAddress:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                userId:
                  type: string
              required:
                - type
              description: Request body for pre-generating a wallet
              examples:
                - type: email
                  email: test@test.com
      responses:
        "200":
          description: Successfully pre-generated a wallet for the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      address:
                        type: string
                        description: The EOA (Externally Owned Account) address of the wallet. This is
                          the traditional wallet address.
                      createdAt:
                        type: string
                        description: The date and time the wallet was created
                      profiles:
                        type: array
                        items:
                          oneOf:
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                familyName:
                                  type: string
                                givenName:
                                  type: string
                                hd:
                                  type: string
                                id:
                                  type: string
                                locale:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - google
                              required:
                                - email
                                - emailVerified
                                - hd
                                - id
                                - locale
                                - picture
                                - type
                              title: Google
                            - type: object
                              properties:
                                email:
                                  type: string
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                name:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - facebook
                              required:
                                - id
                                - type
                              title: Facebook
                            - type: object
                              properties:
                                email:
                                  type: string
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                isPrivateEmail:
                                  type: boolean
                                type:
                                  type: string
                                  enum:
                                    - apple
                              required:
                                - emailVerified
                                - id
                                - isPrivateEmail
                                - type
                              title: Apple
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                  nullable: true
                                id:
                                  type: string
                                name:
                                  type: string
                                  nullable: true
                                type:
                                  type: string
                                  enum:
                                    - github
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: GitHub
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                email:
                                  type: string
                                  format: email
                                emailVerified:
                                  type: boolean
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - discord
                                username:
                                  type: string
                              required:
                                - avatar
                                - emailVerified
                                - id
                                - type
                                - username
                              title: Discord
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - coinbase
                              required:
                                - id
                                - name
                                - type
                              title: Coinbase
                            - type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - x
                                username:
                                  type: string
                              required:
                                - id
                                - name
                                - type
                                - username
                              title: X (Twitter)
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                metadata:
                                  type: object
                                  properties:
                                    avatar:
                                      type: object
                                      properties:
                                        large:
                                          type: string
                                        medium:
                                          type: string
                                        small:
                                          type: string
                                    personaname:
                                      type: string
                                    profileurl:
                                      type: string
                                    realname:
                                      type: string
                                  required:
                                    - avatar
                                type:
                                  type: string
                                  enum:
                                    - steam
                                username:
                                  type: string
                              required:
                                - id
                                - metadata
                                - type
                              title: Steam
                            - type: object
                              properties:
                                firstName:
                                  type: string
                                id:
                                  type: string
                                lastName:
                                  type: string
                                picture:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - telegram
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: Telegram
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                description:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - twitch
                                username:
                                  type: string
                              required:
                                - id
                                - type
                                - username
                              title: Twitch
                            - type: object
                              properties:
                                avatar:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - line
                                username:
                                  type: string
                              required:
                                - id
                                - type
                              title: LINE
                            - type: object
                              properties:
                                fid:
                                  type: string
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - farcaster
                                walletAddress:
                                  type: string
                              required:
                                - fid
                                - id
                                - type
                              title: Farcaster
                            - type: object
                              properties:
                                algorithm:
                                  type: string
                                credentialId:
                                  type: string
                                publicKey:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - passkey
                              required:
                                - algorithm
                                - credentialId
                                - publicKey
                                - type
                              title: Passkey
                            - type: object
                              properties:
                                email:
                                  type: string
                                  format: email
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - email
                              required:
                                - email
                                - id
                                - type
                              title: Email
                            - type: object
                              properties:
                                id:
                                  type: string
                                pregeneratedIdentifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - pre_generation
                              required:
                                - id
                                - pregeneratedIdentifier
                                - type
                              title: Pre-generated Wallet
                            - type: object
                              properties:
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - phone
                              required:
                                - id
                                - phone
                                - type
                              title: Phone
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - siwe
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                                - walletAddress
                              title: Sign-In with Ethereum (SIWE)
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - guest
                              required:
                                - id
                                - type
                              title: Guest
                            - type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - backend
                              required:
                                - id
                                - type
                              title: Backend
                            - type: object
                              properties:
                                identifier:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - server
                              required:
                                - identifier
                                - type
                              title: Server
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_jwt
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom JWT
                            - type: object
                              properties:
                                authProviderId:
                                  type: string
                                email:
                                  type: string
                                id:
                                  type: string
                                phone:
                                  type: string
                                type:
                                  type: string
                                  enum:
                                    - custom_auth_endpoint
                                walletAddress:
                                  type: string
                              required:
                                - id
                                - type
                              title: Custom Auth Endpoint
                        description: The profiles linked to the wallet, can be email, phone, google etc,
                          or backend for developer created wallets
                      smartWalletAddress:
                        type: string
                        description: The smart wallet address with EIP-4337 support. This address
                          enables gasless transactions and advanced account
                          features.
                    required:
                      - address
                      - createdAt
                      - profiles
                required:
                  - result
        "400":
          description: Invalid request. This may occur due to missing required fields
            based on the authentication strategy, invalid strategy, or malformed
            request data.
        "401":
          description: Authentication required. The request must include a valid
            `x-secret-key` header for backend authentication.
        "500":
          description: Internal server error. This may occur due to service unavailability
            or unexpected server errors.
  /v1/wallets/user/siwe:
    get:
      description: >-
        Generate SIWE payload for creating or accessing a user wallet.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: generateSiwePayload
      summary: Generate SIWE Payload
      tags:
        - Wallets
      parameters:
        - schema:
            type: string
            description: The Ethereum wallet address to generate SIWE payload for
          required: true
          description: A valid Ethereum address, which is a 40-character hexadecimal
            string (0x prefixed) representing an account on the Ethereum
            blockchain.
          name: address
          in: query
        - schema:
            type: integer
            minimum: 0
            exclusiveMinimum: true
            description: The chain ID for the SIWE payload
          required: true
          description: "The blockchain network identifier. Common values include: 1
            (Ethereum), 8453 (Base), 137 (Polygon), 56 (BSC), 43114 (Avalanche),
            42161 (Arbitrum), 10 (Optimism)."
          name: chainId
          in: query
      responses:
        "200":
          description: SIWE payload generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  domain:
                    type: string
                    description: The domain requesting the signature
                  address:
                    type: string
                    description: The Ethereum address performing the signing
                  statement:
                    type: string
                    description: A human-readable ASCII assertion that the user will sign
                  uri:
                    type: string
                    description: A URI referring to the resource that is the subject of the signing
                  version:
                    type: string
                    description: The current version of the SIWE Message
                  chain_id:
                    type: string
                    description: The Chain ID to which the session is bound
                  nonce:
                    type: string
                    description: A randomized token used to prevent replay attacks
                  issued_at:
                    type: string
                    description: The time when the message was generated
                  expiration_time:
                    type: string
                    description: The time when the signed authentication message is no longer valid
                  invalid_before:
                    type: string
                    description: The time when the signed authentication message will become valid
                  resources:
                    type: array
                    items:
                      type: string
                    description: A list of information or references to information the user wishes
                      to have resolved
                required:
                  - domain
                  - address
                  - statement
                  - version
                  - nonce
                  - issued_at
                  - expiration_time
                  - invalid_before
                description: SIWE (Sign-In with Ethereum) payload structure
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
  /v1/wallets/user/siwe/verify:
    post:
      description: >-
        Verify SIWE signature for creating or accessing a user wallet.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      operationId: verifySiweSignature
      summary: Login with SIWE
      tags:
        - Wallets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                signature:
                  type: string
                  description: The signature generated by signing the SIWE payload
                payload:
                  type: object
                  properties:
                    domain:
                      type: string
                      description: The domain requesting the signature
                    address:
                      type: string
                      description: The Ethereum address performing the signing
                    statement:
                      type: string
                      description: A human-readable ASCII assertion that the user will sign
                    uri:
                      type: string
                      description: A URI referring to the resource that is the subject of the signing
                    version:
                      type: string
                      description: The current version of the SIWE Message
                    chain_id:
                      type: string
                      description: The Chain ID to which the session is bound
                    nonce:
                      type: string
                      description: A randomized token used to prevent replay attacks
                    issued_at:
                      type: string
                      description: The time when the message was generated
                    expiration_time:
                      type: string
                      description: The time when the signed authentication message is no longer valid
                    invalid_before:
                      type: string
                      description: The time when the signed authentication message will become valid
                    resources:
                      type: array
                      items:
                        type: string
                      description: A list of information or references to information the user wishes
                        to have resolved
                  required:
                    - domain
                    - address
                    - statement
                    - version
                    - nonce
                    - issued_at
                    - expiration_time
                    - invalid_before
                  description: SIWE (Sign-In with Ethereum) payload structure
              required:
                - signature
                - payload
              description: Request body for verifying SIWE signature
              examples:
                - signature: <signature>
                  payload:
                    domain: example.com
                    address: "0x1234567890123456789012345678901234567890"
                    statement: Sign in with Ethereum
                    version: "1"
                    nonce: "1234567890"
                    issued_at: 2021-01-01T00:00:00Z
                    expiration_time: 2021-01-01T00:00:00Z
                    invalid_before: 2021-01-01T00:00:00Z
                    uri: https://example.com
                    chain_id: "1"
                    resources:
                      - https://example.com
      responses:
        "200":
          description: SIWE signature verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isNewUser:
                    type: boolean
                  token:
                    type: string
                  type:
                    type: string
                  walletAddress:
                    type: string
                required:
                  - isNewUser
                  - token
                  - type
                  - walletAddress
        "400":
          description: Invalid signature or request parameters
        "500":
          description: Internal server error
  /v1/transactions:
    get:
      description: >-
        Retrieves a paginated list of transactions associated with the
        authenticated client. Results are sorted by creation date in descending
        order (most recent first). Supports filtering by wallet address and
        pagination controls.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Fetch the first 20 transactions for all wallets
          request:
            query:
              limit: 20
              page: 1
          response:
            result:
              pagination:
                limit: 20
                page: 1
                totalCount: 156
              transactions:
                - chainId: "1"
                  confirmedAt: 2025-07-01T12:01:00Z
                  createdAt: 2025-07-01T12:00:00Z
                  from: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                  id: "0x1234567890abcdef"
                  transactionHash: 0xabcdef1234567890...
          summary: Get Recent Transactions
      operationId: listTransactions
      summary: List Transactions
      tags:
        - Transactions
      parameters:
        - schema:
            type: string
            description: Filter transactions by sender wallet address.
          required: false
          description: Filter transactions by sender wallet address.
          name: from
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            description: Number of transactions to return per page (1-100).
          required: false
          description: Number of transactions to return per page (1-100).
          name: limit
          in: query
        - schema:
            type: integer
            minimum: 1
            default: 1
            description: Page number for pagination, starting from 1.
          required: false
          description: Page number for pagination, starting from 1.
          name: page
          in: query
      responses:
        "200":
          description: Transactions retrieved successfully. Returns a paginated list of
            transactions with metadata including creation and confirmation
            timestamps.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          hasMore:
                            type: boolean
                            description: Whether there are more items available
                          limit:
                            type: number
                            description: Number of items per page
                          page:
                            type: number
                            description: Current page number
                          totalCount:
                            type: number
                            description: Total number of items available
                        required:
                          - limit
                          - page
                      transactions:
                        type: array
                        items:
                          type: object
                          properties:
                            batchIndex:
                              type: integer
                              description: Index within transaction batch
                            cancelledAt:
                              type: string
                              nullable: true
                              description: ISO timestamp when transaction was cancelled, if applicable
                            chainId:
                              type: string
                              description: Blockchain network identifier as string
                            clientId:
                              type: string
                              description: Client identifier that initiated the transaction
                            confirmedAt:
                              type: string
                              nullable: true
                              description: ISO timestamp when transaction was confirmed on-chain
                            confirmedAtBlockNumber:
                              type: string
                              nullable: true
                              description: Block number where transaction was confirmed
                            createdAt:
                              type: string
                              description: ISO timestamp when transaction was created
                            enrichedData:
                              nullable: true
                              description: Additional metadata and enriched transaction information
                            errorMessage:
                              type: string
                              nullable: true
                              description: Error message if transaction failed
                            executionParams:
                              nullable: true
                              description: Parameters used for transaction execution
                            executionResult:
                              nullable: true
                              description: Result data from transaction execution
                            from:
                              type: string
                              nullable: true
                              description: Sender wallet address
                            id:
                              type: string
                              description: Unique transaction identifier
                            transactionHash:
                              type: string
                              nullable: true
                              description: On-chain transaction hash once confirmed
                            transactionParams:
                              nullable: true
                              description: Original transaction parameters and data
                            status:
                              type: string
                              nullable: true
                              description: Transaction status
                          required:
                            - batchIndex
                            - cancelledAt
                            - chainId
                            - clientId
                            - confirmedAt
                            - confirmedAtBlockNumber
                            - createdAt
                            - errorMessage
                            - from
                            - id
                            - transactionHash
                            - status
                    required:
                      - pagination
                      - transactions
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when pagination parameters
            are out of range or wallet address format is invalid.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "500":
          description: Internal server error. This may occur due to engine connectivity
            issues, database unavailability, or unexpected server errors.
    post:
      description: >-
        Submits a blockchain transaction. Supports three types of transactions:
        native token transfers, encoded transactions with custom data, and smart
        contract method calls. The transaction type is determined by the 'type'
        field in the request body.


        **Authentication**: This endpoint requires project authentication and
        wallet authentication. For backend usage, use `x-secret-key` header. For
        frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>`
        headers.
      examples:
        - description: Submit a single native token (ETH, MATIC, etc.) transfer (backend
            usage)
          request:
            body:
              chainId: 1
              from: "0x1234567890123456789012345678901234567890"
              transactions:
                - to: "0x1234567890123456789012345678901234567890"
                  type: native-transfer
                  value: "100000000000000000"
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              transactionIds:
                - 0xabcdef1234567890...
          summary: Single Native Transfer (Backend)
        - description: Batch multiple transactions of different types from same address
            (frontend usage)
          request:
            body:
              chainId: 84532
              from: "0x1234567890123456789012345678901234567890"
              transactions:
                - contractAddress: "0xe352Cf5f74e3ACfd2d59EcCee6373d2Aa996086e"
                  method: function approve(address spender, uint256 amount)
                  params:
                    - "0x1234567890123456789012345678901234567890"
                    - "1000000000000000000"
                  type: contract-call
                - to: "0x1234567890123456789012345678901234567890"
                  type: native-transfer
                  value: "50000000000000000"
            headers:
              Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              x-client-id: your-client-id
          response:
            result:
              transactionIds:
                - 0xabcdef1234567890...
                - 0x1234567890abcdef...
          summary: Batch Mixed Transactions (Frontend)
        - description: Submit encoded transaction with custom data (backend usage)
          request:
            body:
              chainId: 137
              from: "0x1234567890123456789012345678901234567890"
              transactions:
                - data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                    c6000000000000000000000000000000000000000000000000016345785\
                    d8a0000"
                  to: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                  type: encoded
                  value: "0"
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              transactionIds:
                - 0x1234567890abcdef...
          summary: Encoded Transaction (Backend)
      operationId: sendTransactions
      summary: Send Transactions
      tags:
        - Transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: The blockchain network identifier where all transactions will be
                    executed.
                from:
                  type: string
                  description: The wallet address that will send the transaction.
                transactions:
                  type: array
                  items:
                    oneOf:
                      - type: object
                        properties:
                          contractAddress:
                            type: string
                            description: The smart contract address to interact with.
                          method:
                            type: string
                            pattern: ^function\s+\w+
                            description: The contract function signature to call (e.g., 'function
                              approve(address spender, uint256 amount)'). Must
                              start with 'function' followed by the function
                              name and parameters as defined in the contract
                              ABI.
                          params:
                            type: array
                            items:
                              nullable: true
                            description: Array of parameters to pass to the contract method, in the correct
                              order and format.
                          type:
                            type: string
                            enum:
                              - contract-call
                            description: Transaction type for smart contract method calls
                          value:
                            type: string
                            description: Amount of native token to send with the transaction in wei.
                              Required for payable methods.
                        required:
                          - contractAddress
                          - method
                          - type
                        description: Execute a smart contract method call with specified parameters. Use
                          this for interacting with deployed contracts like
                          ERC-20 transfers, NFT minting, or any custom contract
                          function.
                        title: Contract Call Transaction
                      - type: object
                        properties:
                          data:
                            type: string
                            description: Transaction data in hexadecimal format for contract interactions or
                              custom payloads.
                          to:
                            type: string
                            description: The target address for the encoded transaction.
                          type:
                            type: string
                            enum:
                              - encoded
                            description: Transaction type for pre-encoded transaction data
                          value:
                            type: string
                            description: Amount of native token to send in wei (smallest unit). Use '0' or
                              omit for non-value transactions.
                        required:
                          - data
                          - to
                          - type
                        description: Submit a transaction with pre-encoded data payload. Use this when
                          you have already encoded the contract call data or
                          need to send custom transaction data.
                        title: Encoded Transaction
                      - type: object
                        properties:
                          to:
                            type: string
                            description: The recipient wallet address.
                          type:
                            type: string
                            enum:
                              - native-transfer
                            description: Transaction type for native token transfers
                          value:
                            type: string
                            description: Amount of native token to send in wei (smallest unit).
                        required:
                          - to
                          - type
                          - value
                        description: Transfer native blockchain tokens (ETH, MATIC, BNB, etc.) directly
                          to another wallet address. This is equivalent to a
                          simple wallet-to-wallet transfer.
                        title: Native Token Transfer
                    description: "A blockchain transaction of one of three supported types: contract
                      call, encoded transaction, or native token transfer."
                    title: Transaction
                  minItems: 1
                  description: Array of blockchain transactions to execute. All transactions will
                    use the same from address and chainId.
              required:
                - chainId
                - from
                - transactions
              description: Request object containing an array of blockchain transactions to
                execute. All transactions must use the same from address and
                chainId. Supports batching multiple transactions of different
                types in a single request.
              examples:
                - chainId: 84532
                  from: "0x1234567890123456789012345678901234567890"
                  transactions:
                    - contractAddress: "0xe352Cf5f74e3ACfd2d59EcCee6373d2Aa996086e"
                      method: function approve(address spender, uint256 amount)
                      params:
                        - "0x1234567890123456789012345678901234567890"
                        - "1000000000000000000"
                      type: contract-call
                - chainId: 137
                  from: "0x1234567890123456789012345678901234567890"
                  transactions:
                    - data: "0xa9059cbb000000000000000000000000742d35cc6634c0532925a3b8d43c67b8c8b3e9\
                        c600000000000000000000000000000000000000000000000001634\
                        5785d8a0000"
                      to: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                      type: encoded
                      value: "0"
                    - to: "0x1234567890123456789012345678901234567890"
                      type: native-transfer
                      value: "100000000000000000"
              title: Transaction Request
      responses:
        "200":
          description: Transaction submitted successfully. Returns the transaction ID for
            tracking and monitoring.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      transactionIds:
                        type: array
                        items:
                          type: string
                        description: Array of unique identifiers for the submitted transactions. Use
                          these to track transaction status.
                    required:
                      - transactionIds
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when transaction parameters
            are malformed, insufficient balance, invalid contract data, or
            unsupported transaction type.
        "401":
          description: "Authentication required. For backend usage, include `x-secret-key`
            header. For frontend usage, include `x-client-id` + `Authorization:
            Bearer <jwt>` headers."
        "500":
          description: Internal server error. This may occur due to blockchain
            connectivity issues, gas estimation failures, contract execution
            errors, or unexpected server errors.
  /v1/transactions/{transactionId}:
    get:
      description: >-
        Retrieves detailed information about a specific transaction using its
        unique identifier. Returns comprehensive transaction data including
        execution status, blockchain details, and any associated metadata.


        **Authentication**: Pass `x-client-id` header for frontend usage from
        allowlisted origins or `x-secret-key` for backend usage.
      examples:
        - description: Fetch complete details for a specific transaction
          request:
            params:
              transactionId: "0x1234567890abcdef"
          response:
            result:
              chainId: "1"
              confirmedAt: 2025-07-01T12:01:00Z
              confirmedAtBlockNumber: "20123456"
              createdAt: 2025-07-01T12:00:00Z
              errorMessage: null
              from: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
              id: "0x1234567890abcdef"
              transactionHash: 0xabcdef1234567890...
          summary: Get Transaction Details
      operationId: getTransactionById
      summary: Get Transaction by ID
      tags:
        - Transactions
      parameters:
        - schema:
            type: string
            description: Unique identifier of the transaction to retrieve.
          required: true
          description: Unique identifier of the transaction to retrieve.
          name: transactionId
          in: path
      responses:
        "200":
          description: Transaction details retrieved successfully. Returns comprehensive
            transaction information including status, blockchain details, and
            execution metadata.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      batchIndex:
                        type: integer
                        description: Index within transaction batch
                      cancelledAt:
                        type: string
                        nullable: true
                        description: ISO timestamp when transaction was cancelled, if applicable
                      chainId:
                        type: string
                        description: Blockchain network identifier as string
                      clientId:
                        type: string
                        description: Client identifier that initiated the transaction
                      confirmedAt:
                        type: string
                        nullable: true
                        description: ISO timestamp when transaction was confirmed on-chain
                      confirmedAtBlockNumber:
                        type: string
                        nullable: true
                        description: Block number where transaction was confirmed
                      createdAt:
                        type: string
                        description: ISO timestamp when transaction was created
                      enrichedData:
                        nullable: true
                        description: Additional metadata and enriched transaction information
                      errorMessage:
                        type: string
                        nullable: true
                        description: Error message if transaction failed
                      executionParams:
                        nullable: true
                        description: Parameters used for transaction execution
                      executionResult:
                        nullable: true
                        description: Result data from transaction execution
                      from:
                        type: string
                        nullable: true
                        description: Sender wallet address
                      id:
                        type: string
                        description: Unique transaction identifier
                      transactionHash:
                        type: string
                        nullable: true
                        description: On-chain transaction hash once confirmed
                      transactionParams:
                        nullable: true
                        description: Original transaction parameters and data
                      status:
                        type: string
                        nullable: true
                        description: Transaction status
                    required:
                      - batchIndex
                      - cancelledAt
                      - chainId
                      - clientId
                      - confirmedAt
                      - confirmedAtBlockNumber
                      - createdAt
                      - errorMessage
                      - from
                      - id
                      - transactionHash
                      - status
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the transaction ID
            format is invalid or malformed.
        "401":
          description: Authentication required. The request must include a valid
            `x-client-id` header for frontend usage or x-secret-key for backend
            usage.
        "404":
          description: Transaction not found. The specified transaction ID does not exist
            or is not associated with the authenticated client.
        "500":
          description: Internal server error. This may occur due to engine connectivity
            issues, database unavailability, or unexpected server errors.
  /v1/sign/message:
    post:
      description: >-
        Signs an arbitrary message using a connected wallet. This endpoint
        supports both text and hexadecimal message formats. The signing is
        performed using thirdweb Engine with smart account support for gasless
        transactions.


        **Authentication**: This endpoint requires project authentication and
        wallet authentication. For backend usage, use `x-secret-key` header. For
        frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>`
        headers.
      examples:
        - description: Sign a plain text message for user authentication or verification
            (backend usage)
          request:
            body:
              chainId: 1
              from: "0x1234567890123456789012345678901234567890"
              message: Hello, thirdweb!
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              signature: 0x1234567890abcdef...
          summary: Sign Text Message (Backend)
        - description: Sign a hexadecimal encoded message (frontend usage)
          request:
            body:
              chainId: 137
              from: "0x1234567890123456789012345678901234567890"
              message: "0x48656c6c6f2c207468697264776562"
            headers:
              Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          response:
            result:
              signature: 0xabcdef1234567890...
          summary: Sign Hex Message (Frontend)
      operationId: signMessage
      summary: Sign Message
      tags:
        - Signatures
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: "The blockchain network identifier where the signing will occur.
                    Common values include: 1 (Ethereum), 137 (Polygon), 56
                    (BSC)."
                from:
                  type: string
                  description: The wallet address that will sign the message.
                message:
                  type: string
                  description: The message to be signed. Can be plain text or hexadecimal format
                    (starting with 0x). The format is automatically detected.
              required:
                - chainId
                - from
                - message
              description: Request body for signing a message
              examples:
                - chainId: 1
                  from: "0x1234567890123456789012345678901234567890"
                  message: Hello, world!
      responses:
        "200":
          description: Message signed successfully. Returns the cryptographic signature
            that can be used for verification.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      signature:
                        type: string
                        description: The cryptographic signature in hexadecimal format. This can be used
                          for verification and authentication purposes.
                    required:
                      - signature
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the wallet address
            format is invalid, chainId is not supported, or the message format
            is incorrect.
        "401":
          description: "Authentication required. For backend usage, include `x-secret-key`
            header. For frontend usage, include `x-client-id` + `Authorization:
            Bearer <jwt>` headers."
        "500":
          description: Internal server error. This may occur due to wallet connectivity
            issues, signing service unavailability, or unexpected server errors.
  /v1/sign/typed-data:
    post:
      description: >-
        Signs structured data according to the EIP-712 standard. This is
        commonly used for secure message signing in DeFi protocols, NFT
        marketplaces, and other dApps that require structured data verification.
        The typed data includes domain separation and type definitions for
        enhanced security.


        **Authentication**: This endpoint requires project authentication and
        wallet authentication. For backend usage, use `x-secret-key` header. For
        frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>`
        headers.
      examples:
        - description: Sign a permit message for gasless ERC-20 token approvals (backend
            usage)
          request:
            body:
              chainId: 1
              domain:
                chainId: "1"
                name: MyToken
                verifyingContract: "0xA0b86a33E6411E3036C1C4c7E815D0a82e3F5fD6"
                version: "1"
              from: "0x1234567890123456789012345678901234567890"
              message:
                deadline: "1735689600"
                nonce: "0"
                owner: "0x742d35Cc6634C0532925a3b8D43C67B8c8B3E9C6"
                spender: "0x1234567890123456789012345678901234567890"
                value: "1000000000000000000"
              primaryType: Permit
              types:
                Permit:
                  - name: owner
                    type: address
                  - name: spender
                    type: address
                  - name: value
                    type: uint256
                  - name: nonce
                    type: uint256
                  - name: deadline
                    type: uint256
            headers:
              x-secret-key: your-secret-key
          response:
            result:
              signature: 0x1234567890abcdef...
          summary: Sign ERC-20 Permit (Backend)
      operationId: signTypedData
      summary: Sign Typed Data
      tags:
        - Signatures
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: integer
                  minimum: 0
                  exclusiveMinimum: true
                  description: The blockchain network identifier for EIP-712 domain separation.
                domain:
                  type: object
                  properties:
                    chainId:
                      type: string
                      description: Chain ID as string for domain separation
                    name:
                      type: string
                      description: The domain name (e.g., token name)
                    salt:
                      type: string
                      description: Optional salt for additional entropy
                    verifyingContract:
                      type: string
                      description: The contract address that will verify this signature
                    version:
                      type: string
                      description: Domain version for signature compatibility
                  description: EIP-712 domain separator containing contract and chain information
                    for signature verification.
                from:
                  type: string
                  description: The wallet address that will sign the typed data.
                message:
                  type: object
                  additionalProperties:
                    nullable: true
                  description: The structured data to be signed, matching the defined types
                    schema.
                primaryType:
                  type: string
                  description: The primary type name from the types object that defines the main
                    structure being signed.
                types:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The field name
                        type:
                          type: string
                          description: The Solidity type (e.g., 'address', 'uint256')
                      required:
                        - name
                        - type
                  description: Type definitions for the structured data, following EIP-712
                    specifications.
              required:
                - chainId
                - domain
                - from
                - message
                - primaryType
                - types
              description: Request body for signing typed data
              examples:
                - chainId: 1
                  from: "0x1234567890123456789012345678901234567890"
                  domain:
                    name: MyDomain
                    version: "1"
                    chainId: "1"
                    verifyingContract: "0x1234567890123456789012345678901234567890"
                  message:
                    name: foo
                  primaryType: MyType
                  types:
                    MyType:
                      - name: name
                        type: string
      responses:
        "200":
          description: Typed data signed successfully. Returns the EIP-712 compliant
            signature that can be used for on-chain verification.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      signature:
                        type: string
                        description: The cryptographic signature in hexadecimal format. This can be used
                          for verification and authentication purposes.
                    required:
                      - signature
                required:
                  - result
        "400":
          description: Invalid request parameters. This occurs when the typed data
            structure is malformed, domain parameters are incorrect, or wallet
            address format is invalid.
        "401":
          description: Authentication required. The request must include valid
            `x-wallet-access-token` headers for accessing the wallet, as well as
            a x-client-id (frontend) or x-secret-key (backend) for project
            authentication.
        "500":
          description: Internal server error. This may occur due to wallet connectivity
            issues, signing service unavailability, or unexpected server errors.
  /mcp:
    post:
      description: >-
        Model Context Protocol (MCP) server endpoint that exposes all thirdweb
        API endpoints as MCP tools. This allows LLMs and AI assistants to
        interact with the thirdweb API through the standardized MCP protocol.


        Authentication via x-secret-key is required for all requests.
      operationId: mcpServer
      summary: MCP Server
      tags:
        - AI
      requestBody:
        content:
          application/json:
            schema:
              nullable: true
      responses:
        "200":
          description: MCP response
          content:
            application/json:
              schema:
                nullable: true
  /llms.txt:
    get:
      tags:
        - AI
      description: The full openAPI reference for the thirdweb API in LLMs.txt format.
        Useful for AI assistants to understand the API and its capabilities. No
        authentication is required.
      operationId: llmsTxt
      summary: llms.txt
      responses:
        "200":
          description: LLMs.txt
          content:
            text/plain:
              schema:
                type: string
